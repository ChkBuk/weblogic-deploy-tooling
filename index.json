[
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/create/",
	"title": "Create Domain Tool",
	"tags": [],
	"description": "Understands how to create a domain and populate the domain with all resources and applications specified in the model.",
	"content": "The Create Domain Tool uses a model and WLST offline to create a domain. To use the tool, at a minimum, the model must specify the domain\u0026rsquo;s administrative password in the domainInfo section of the model, as shown below.\ndomainInfo: AdminPassword: welcome1 Using the model above, simply run the createDomain tool, specifying the type of domain to create and where to create it.\nweblogic-deploy\\bin\\createDomain.cmd -oracle_home c:\\wls12213 -domain_type WLS -domain_parent d:\\demo\\domains -model_file MinimalDemoDomain.yaml  Clearly, creating an empty domain with only the template-defined servers is not very interesting, but this example just reinforces how sparse the model can be. When running the Create Domain Tool, the model must be provided either inside the archive file or as a standalone file. If both the archive and model files are provided, the model file outside the archive will take precedence over any that might be inside the archive. If the archive file is not provided, the Create Domain Tool will create the topology section only (using the domainInfo section) of the model in the domain. This is because the resources and appDeployments sections of the model can reference files from the archive so to create the domain with the model-defined resources and applications, an archive file must be provided\u0026ndash;even if the model does not reference anything in the archive. At some point in the future, this restriction may be relaxed to require the archive only if it is actually needed.\nThe Create Domain Tool understands three domain types: WLS, RestrictedJRF, and JRF. When specifying the domain type, the Oracle Home must match the requirements for the domain type. Both RestrictedJRF and JRF require an Oracle Home with the FMW Infrastucture (also known as JRF) installed. When creating a JRF domain, the RCU database information must be provided as arguments to the createDomain script. Note that the tool will prompt for any passwords required. Optionally, they can be piped to standard input (for example, stdin) of the script, to make the script run without user input. For example, the command to create a JRF domain looks like the one below. Note that this requires the user to have run RCU prior to running the command.\nweblogic-deploy\\bin\\createDomain.cmd -oracle_home c:\\jrf12213 -domain_type JRF -domain_parent d:\\demo\\domains -model_file DemoDomain.yaml -rcu_db mydb.example.com:1539/PDBORCL -rcu_prefix DEMO [-rcu_db_user SYS]  To have the Create Domain Tool run RCU, simply add the -run_rcu argument to the previous command line and the RCU schemas will be automatically created. Be aware that when the tool runs RCU, it will automatically drop any conflicting schemas that already exist with the same RCU prefix prior to creating the new schemas!\nIt is also possible to specify the connection information in the model instead of using the command-line arguments. This is especially easier for databases that require complex database connection string and extra parameters, such as RAC or Oracle Autonomous Transaction Processing Cloud Service database. For information on how to use it, refer to Specifying RCU connection information in the model\nTo create more complex domains, it may be necessary to create a custom domain type. This is useful for cases where the domain has custom templates, or templates for other Oracle products. For more information, refer to Domain Type Definitions.\nUsing an Encrypted Model If the model or variables file contains passwords encrypted with the WDT Encryption tool, decrypt the passwords during create with the -use_encryption flag on the command line to tell the Create Domain Tool that encryption is being used and to prompt for the encryption passphrase. As with the database passwords, the tool can also read the passphrase from standard input (for example, stdin) to allow the tool to run without any user input.\nUsing Multiple Models The Create Domain Tool supports the use of multiple models, as described in Using Multiple Models.\nDevelopment Domain and boot.properties When creating a development domain, WDT provides the convenience of making a boot.properties file for each of the servers in the domain. The boot.properties file will contain encrypted values of the Administration Server user name and password. When the Administration Server or Managed Server is started, WebLogic Server will bypass the prompt for credentials, and instead use the credentials from the boot.properties file.\nA domain is in production mode if the ServerStartMode option is set to prod or the domain ProductionModeEnabled is set to true. The default value for both of these attributes is development mode.\nThe boot.properties file is stored in the domain home on the machine where WDT runs. It is stored for each server as \u0026lt;domain_home\u0026gt;/servers/\u0026lt;server_name\u0026gt;/security/boot.properties.\nThe following is a model example with both attributes explicitly set to development mode.\ndomainInfo: AdminUserName: weblogic AdminPassword: welcome1 ServerStartMode: dev topology: Name: \u0026#34;my-domain\u0026#34; AdminServerName: \u0026#34;admin-server\u0026#34; ProductionModeEnabled: false "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/install/",
	"title": "Install WDT",
	"tags": [],
	"description": "",
	"content": "Download and Install the Software The WebLogic Deploy Tooling project repository is located at https://github.com/oracle/weblogic-deploy-tooling.\nBinary distributions of the weblogic-deploy.zip installer can be downloaded from the GitHub Releases page.\n To install the software, simply unzip the weblogic-deploy.zip installer on a machine that has the desired versions of WebLogic Server installed. After being unzipped, the software is ready to use, just set the JAVA_HOME environment variable to point to a Java 7 or higher JDK and the shell scripts are ready to run.  Supported WLS Versions The following table specifies the supported WebLogic Server versions, along with the JDK versions, that must be used to run the WDT tool. You must set the JAVA_HOME environment variable to specify a JDK version different from the system default version.\nTo create a domain with the proper JDK (particularly if the JAVA_HOME is different from the one which will be used by the target domain), set the domain JavaHome attribute in the domain model.\nNote: The WDT Encryption Model Tool used to encrypt and decrypt clear text passwords in the model and variable files, requires WDT to run with a minimum JDK version of 1.8.\n   WebLogic Server Version Tool JDK Version     10.3.6 1.7   12.1.1 1.7, 1.8   12.1.2 [1][2] 1.7, 1.8   12.1.3 1.7, 1.8   12.2.1 [3] 1.8   12.2.1.1 [4] 1.8   12.2.1.2 1.8   12.2.1.3 1.8   12.2.1.4 [5] 1.8   14.1.1 1.8, 1.11    1 First release dynamic clusters are supported\n2 First release Coherence clusters are supported\n3 First release WLS roles are supported\n4 First release multitenancy is supported\n5 Last release multitenancy is supported\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/concepts/model/",
	"title": "Metadata Model",
	"tags": [],
	"description": "",
	"content": "The metadata model (or model, for short) is a version-independent description of a WebLogic Server domain configuration. The tools are designed to support a sparse model so that the model need only describe what is required for the specific operation without describing other artifacts. For example, to deploy an application that depends on a JDBC data source into an existing domain that may contain other applications or data sources, the model needs to describe only the application and the data source in question. If the data source was previously created, the deployApps tool will not try to recreate it but may update part of that data source\u0026rsquo;s configuration if the model description is different than the existing values. If the application was previously deployed, the deployApps tool will compare the binaries to determine if the application needs to be redeployed or not.\nThe model structure, and its folder and attribute names, are based on the WLST 12.2.1.3 offline structure and names with redundant folders removed to keep the model simple. For example, the WLST path to the URL for a JDBC data source is /JDBCSystemResource/\u0026lt;data-source-name\u0026gt;/JdbcResource/\u0026lt;data-source-name\u0026gt;/JDBCDriverParams/NO_NAME_0/URL. In the model, it is resources:/JDBCSystemResource/\u0026lt;data-source-name\u0026gt;/JdbcResource/JDBCDriverParams/URL (where resources is the top-level model section where all WebLogic Server resources/services are described).\nThe model is written in YAML (or optionally, JSON). The YAML parser, built into the underlying framework, is both strict with regard to the specification and supports only the subset of YAML needed to describe WebLogic Server artifacts. For example, YAML does not support tabs as indent characters so the parser will generate parse errors if the model file contains leading tabs used for indention purposes. In general, names and values can be specified without quotes except when the content contains one of the restricted characters; in which case, the content must be enclosed in either single or double quotes. The restricted characters are:\n comma colon exclamation mark question mark hyphen ampersand percent sign \u0026ldquo;at\u0026rdquo; sign star pound sign (also known as hash) equal sign less than greater than square brackets curly braces back quote  All assignment statements must have one or more spaces between the colon and the value. All comments must have a space after the pound sign (also known as hash) to be considered a comment. YAML doesn\u0026rsquo;t allow comments in all locations. While the YAML parser used by the framework does not try to enforce these restrictions, it is likely that putting comments in some locations may cause parse errors since YAML is a difficult language to parse due to its complex indention rules.\nContents  Top-Level Sections Simple Example Model Names Model Tokens Model Semantics Declaring Named MBeans to Delete Using Multiple Models  Top-Level Model Sections The tooling has five top-level model sections:\n domainInfo - The location where special information not represented in WLST is specified (for example, the libraries that go in $DOMAIN_HOME/lib). topology - The location where servers, clusters, machines, server templates, and other domain-level configuration is specified. resources - The location where resources and services are specified (for example, data sources, JMS, WLDF). appDeployments - The location where shared libraries and applications are specified. kubernetes - The location where the WLS Kubernetes Operator domain configuration is specified.  Simple Example Here is a simple example of a model to deploy an application and its data source:\nresources: JDBCSystemResource: MyDataSource: Target: \u0026#39;@@PROP:myjcs.cluster1.name@@\u0026#39; JdbcResource: JDBCDataSourceParams: JNDIName: jdbc/generic1 JDBCDriverParams: DriverName: oracle.jdbc.OracleDriver URL: \u0026#39;jdbc:oracle:thin:@//@@PROP:dbcs1.url@@\u0026#39; PasswordEncrypted: \u0026#39;@@PROP:dbcs1.password@@\u0026#39; Properties: user: Value: \u0026#39;@@PROP:dbcs1.user@@\u0026#39; oracle.net.CONNECT_TIMEOUT: Value: 5000 JDBCConnectionPoolParams: MaxCapacity: 50 appDeployments: Application: simpleear : SourcePath: wlsdeploy/applications/simpleear.ear Target: \u0026#39;@@PROP:myjcs.cluster1.name@@\u0026#39; ModuleType: ear Library: \u0026#39;jsf#2.0\u0026#39;: SourcePath: \u0026#39;@@WL_HOME@@/common/deployable-libraries/jsf-2.0.war\u0026#39; Target: \u0026#39;@@PROP:myjcs.cluster1.name@@\u0026#39; ModuleType: war The above example shows two important features of the framework. First, notice that the URL, PasswordEncrypted, user property Value and all Target fields contain values that have a @@PROP:\u0026lt;name\u0026gt;@@ pattern. This indicates a variable placeholder whose value is specified at runtime using a variables file. See Model Tokens for more information about this and other token types.\nSecond, notice that the jsf#2.0 shared library SourcePath attribute value starts with @@WL_HOME@@. This is a path token that can be used to specify that the location is relative to the location of the WebLogic Server home directory on the target environment. See Model Tokens for more information and a list of available path tokens.\nThe example above shows the attribute SourcePath of the simpleear application with a value of wlsdeploy/applications/simpleear.ear. The prefix wlsdeploy/ indicates that the resource is located in the archive file in the specified location, and will be deployed to that directory within the domain, in this case \u0026lt;domain-home\u0026gt;/wlsdeploy/applications/simpleear.ear. See The Archive File for more details about using the archive file.\nUsers can create further directory structures underneath the above locations to organize the files and directories as they see fit. Note that any binary that already exists on the target system need not be included in the archive provided that the model specified the correct location on the target system.\nOne final note is that the framework is written in such a way to allow the model to be extended for use by other tools. Adding other top-level sections to the model is supported and the existing tooling and framework will simply ignore them, if present. For example, it would be possible to add a soaComposites section to the model where SOA composite applications are described, and a location within the archive file where those binaries can be stored, so that a tool that understands SOA composites and how to deploy them could be run against the same model and archive files.\nModel Names The WebLogic Deploy Tooling handles names of WebLogic Server configuration artifacts in a very prescribed way. To understand how names are handled, users first need a basic understanding of WLST offline naming. In WLST offline, there are two general categories of configuration artifacts:\n Artifacts that can hold zero or more references to another configuration artifact type. Artifacts that can hold zero or one reference to another configuration artifact.  For example, a domain can contain zero or more JDBCSystemResource or AppDeployment instances but can only contain a single SecurityConfiguration artifact. When working with configuration artifacts like JDBCSystemResource, the name is always modeled as a sub-element of the JDBCSystemResource element, as shown below.\nresources: JDBCSystemResource: MyDataSource: Target: mycluster ... YourDataSource: Target: yourcluster ... In the example above, the model has two instances of JDBCSystemResource: one named MyDataSource and one named YourDataSource. For anyone familiar with WLST, this should seem somewhat familiar because the WLST offline path to the MyDataSource configuration will always start with /JDBCSystemResource/MyDataSource. What might not seem familiar is that in this WLST folder, there is a Name attribute that is also set to MyDataSource. The WebLogic Deploy Tooling requires that modelers set the JDBCSystemRTesource name using the folder semantics as shown in the example. It is not possible to set the Name using the Name attribute inside the folder and any attempts to do so, will not work; in this case, the Name attribute is redundant because the name was already specified as the folder name.\nWhen working with artifacts like SecurityConfiguration or JMX, there is never more than one instance of these artifacts in a domain because they are just configuration containers and their names generally have no semantic meaning. As such, the WebLogic Deploy Tooling does not expose these names in the model, as shown below:\ntopology: SecurityConfiguration: NodeManagerUsername: weblogic NodeManagerPasswordEncrypted: welcome1 As the example above shows, the SecurityConfiguration element has no named sub-element, as there is with JDBCSystemResource, even though the WLST path to the SecurityConfiguration attributes is /SecurityConfiguration/\u0026lt;domain-name\u0026gt;. The WebLogic Deploy Tooling has built-in rules and a knowledge base that controls how these names are handled so that it can complete the configuration of these artifacts. As with the previous class of configuration artifact, the folder almost always contains a  Name attribute that, in WLST, could be used to change the name. As with the previous class of artifact, the WebLogic Deploy Tooling does not support the use of the Name attribute in these folders and any attempt to set the Name attribute will not be honored. In general, the only model location that uses the Name attribute is the top-level topology section, because this maps to where WLST stores the domain name.\nModel Tokens The model allows the use of tokens that are substituted with text values as the model is processed. This section describes several types of tokens.\nVariable tokens are declared with the syntax @@PROP:\u0026lt;variable\u0026gt;@@. This type of token represents a value that is resolved at runtime using a variables file in a standard Java properties file format. Variables can be used for any value and for some names. For example, to automate standing up an environment with one or more applications in the Oracle Java Cloud Service, service provisioning does not allow the provisioning script to specify the server names. For example, if the application being deployed immediately following provisioning needs to tweak the Server Start arguments to specify a Java system property, the model can use a variable placeholder in place of the server name and populate the variable file with the provisioned server names dynamically between provisioning and application deployment.\nFile tokens are declared with the syntax @@FILE:\u0026lt;filename\u0026gt;@@. This type of token is similar to a variable token, but it references a single value that is read from the specified file. For example, the model may reference a password attribute as follows:\nPasswordEncrypted: \u0026#39;@@FILE:/home/me/dbcs1.txt@@\u0026#39; The file /home/me/dbcs1.txt would then contain this single line:\npassword#123 As the model is processed, the value for the PasswordEncrypted would resolve to password#123. It is also possible to combine file placeholders with other types of tokens, to allow for variations in the name and location of the file, such as:\nPasswordEncrypted: \u0026#39;@@FILE:/dir/@@PROP:name@@.txt@@\u0026#39; PasswordEncrypted: \u0026#39;@@FILE:@@ORACLE_HOME@@/dir/name.txt@@\u0026#39; Environment tokens are declared with the syntax @@ENV:\u0026lt;name\u0026gt;@@. This type of token is resolved by looking up the system environment variable \u0026lt;name\u0026gt;, and substituting that value for the token.\nSecret tokens are declared with the syntax @@SECRET:\u0026lt;name\u0026gt;:\u0026lt;key\u0026gt;@@. This type of token is resolved by determining the location of a Kubernetes secret file, and reading the first line from that file. That line is substituted for the token.\nThere are two methods for deriving the location of the Kubernetes secret file. The first method involves using one or more configured root directories, and looking for the secret file in the path \u0026lt;root-directory\u0026gt;/\u0026lt;name\u0026gt;/\u0026lt;key\u0026gt;.\nThe root directories are configured as a comma-separated list of directories, using the environment variable WDT_MODEL_SECRETS_DIRS. For example, if WDT_MODEL_SECRETS_DIRS is set to /etc/my-secrets,/etc/your-secrets, then the token @@SECRET:secrets:the-secret@@ will search the following locations:\n/etc/my-secrets/secrets/the-secret /etc/your-secrets/secrets/the-secret If either of these files is found, the secret is read from that file and substituted in the model.\nThe second method for locating the Kubernetes secret file is to use the environment variable WDT_MODEL_SECRETS_NAME_DIR_PAIRS to map \u0026lt;name\u0026gt; values to specific directory locations. For example, if WDT_MODEL_SECRETS_NAME_DIR_PAIRS is set to my-root=/etc/my-secrets,your-root=/etc/your-secrets, then the token @@SECRET:your-root:the-secret@@ will look for the secrets file at:\n/etc/your-secrets/the-secret If the \u0026lt;name\u0026gt; value has a corresponding mapped directory in WDT_MODEL_SECRETS_NAME_DIR_PAIRS, then that directory will take precedence over any roots specified in WDT_MODEL_SECRETS_DIRS.\nNOTE: It is important that the secrets directories contain only secrets files, because those files are examined to create a list of available name/key pairs.\nPath tokens are tokens that reference known values, and can be used to make the model more portable. For example, a model may reference a WebLogic library source path as:\nSourcePath: \u0026#39;@@WL_HOME@@/common/deployable-libraries/jsf-2.0.war\u0026#39; Using the path token @@WL_HOME@@ allows the model to be used across multiple environments, even if the WebLogic installation directory is different. Path tokens can be used at any location in the model that specifies a file or directory location. The supported tokens are:\n @@ORACLE_HOME@@ - The location where WebLogic Server and any other FMW products are installed (in older versions, this was known as the MW_HOME). @@WL_HOME@@ - The location within the Oracle Home where WebLogic Server is installed (for example, the $ORACLE_HOME/wlserver directory in 12.1.2+). @@DOMAIN_HOME@@ - The location of the domain home directory on which the tool is working. @@PWD@@ - The current working directory from which the tool was invoked. @@TMP@@ - The location of the temporary directory, as controlled by the java.io.tmpdir system property.  Model Semantics When modeling configuration attributes that can have multiple values, the WebLogic Deploy Tooling tries to make this as painless as possible. For example, the Target attribute on resources can have zero or more clusters and/or servers specified. When specifying the value of such list attributes, the user has freedom to specify them as a list or as a comma-delimited string (comma is the only recognized delimiter for lists). For attributes where the values can legally contain commas, the items must be specified as a list. Examples of each are shown below.\nresources: JDBCSystemResource: MyStringDataSource: Target: \u0026#39;AdminServer,mycluster\u0026#39; JdbcResource: JDBCDataSourceParams: JNDIName: \u0026#39;jdbc/generic1, jdbc/special1\u0026#39; ... MyListDataSource: Target: [ AdminServer, mycluster ] JdbcResource: JDBCDataSourceParams: JNDIName: [ jdbc/generic2, jdbc/special2 ] ... WLDFSystemResource: MyWldfModule: Target: mycluster WLDFResource: Harvester: HarvestedType: weblogic.management.runtime.ServerRuntimeMBean: Enabled: true HarvestedInstance: [ \u0026#39;com.bea:Name=AdminServer,Type=ServerRuntime\u0026#39;, \u0026#39;com.bea:Name=m1,Type=ServerRuntime\u0026#39; ] ... In the example above, the Target attribute is specified three different ways, as a comma-separated string, as a list, and as a single string in the case of where there is only a single target. The JNDIName attribute is specified as a comma-separated string and as a list (a single string also works). On the other hand, the HarvestedInstances attribute had to be specified as a list because each element contains commas.\nOne of the primary goals of the WebLogic Deploy Tooling is to support a sparse model where the user can specify just the configuration needed for a particular situation. What this implies varies somewhat between the tools but, in general, this implies that the tools are using an additive model. That is, the tools add to what is already there in the existing domain or domain templates (when creating a new domain) rather than making the domain conform exactly to the specified model. Where it makes sense, a similar, additive approach is taken when setting the value of multi-valued attributes. For example, if the model specified the cluster mycluster as the target for an artifact, the tooling will add mycluster to any existing list of targets for the artifact. While the development team has tried to mark attributes that do not make sense to merge accordingly in our knowledge base, this behavior can be disabled on an attribute-by-attribute basis, by adding an additional annotation in the knowledge base data files. The development team is already thinking about how to handle situations that require a non-additive, converge-to-the-model approach, and how that might be supported, but this still remains a wish list item. Users with these requirements should raise an issue for this support.\nDeclaring Named MBeans to Delete With WebLogic Deploy Tooling release 1.3.0, you can specify named items in the model to be deleted using the Create Domain, Update Domain, and Deploy Applications Tools. Named items are those that have multiple instances that are distinguished by user-provided names, such as managed servers, data sources, and security realms. Items to be deleted are prepended with an exclamation point (!) in the model.\nIn this example, the managed server obsoleteServer will be deleted, and newServer will be created:\nServer: !obsoleteServer: newServer: ListenAddress: 127.0.0.1 ListenPort: 9005 If the name of the item requires quotation marks, the exclamation point should be inside the quotation marks:\nServer: \u0026#39;!obsolete-server\u0026#39;: This feature can also remove items that were created by WebLogic Server templates. For example, the base template creates a default security realm called myrealm. If a user chooses to declare a custom realm, myrealm is no longer needed. In this example, myrealm will be deleted, and the custom realm newrealm will be created, and declared as the default realm:\nSecurityConfiguration: DefaultRealm: newrealm Realm: !myrealm: newrealm: AuthenticationProvider: ... This feature does not apply to named security providers within a realm. These items follow a special set of rules that are required to maintain their ordering. See Modeling Security Providers for detailed information.\nThis feature cannot be use to un-deploy applications or remove libraries.\nUsing Multiple Models The Create Domain, Update Domain, Deploy Applications, and Validate Model Tools allow the specification of multiple models on the command line. For example:\nweblogic-deploy\\bin\\createDomain.cmd -model_file modelOne,modelTwo,modelThree ...  In this case, the models are merged into a single model before being applied. Each successive model is added to the previous model. In cases where entities exist in both models, the attributes are combined and attribute values from successive models prevail. The resulting model is then verified before being applied. For example, if Model 1 looks like:\ntopology: Server: m1: ListenPort: 7000 Notes: \u0026#34;Server 1\u0026#34; m2: ListenPort: 9000 and Model 2 looks like:\ntopology: Server: m1: ListenAddress: myhostname ListenPort: 8000 m3: ListenPort: 10000 The attributes for server m1 are merged, server m2 is left unchanged, and server m3 is added. The resulting model would be:\ntopology: Server: m1: ListenAddress: myhostname ListenPort: 8000 Notes: \u0026#34;Server 1\u0026#34; m2: ListenPort: 9000 m3: ListenPort: 10000 If variable properties are used in element names, such as @@PROP:my-server@@, the names in both models will be resolved and matching elements will be merged.\nMultiple Models and Delete Notation A named element using delete notation will completely delete an element with a matching name and no delete notation in a previous model. For example, if Model 1 looks like:\ntopology: Server: m1: ListenPort: 7000 Notes: \u0026#34;Server 1\u0026#34; m2: ListenPort: 9000 and Model 2 looks like:\ntopology: Server: !m2: The resulting model would be:\ntopology: Server: m1: ListenPort: 7000 Notes: \u0026#34;Server 1\u0026#34; Similarly, an element without delete notation will completely replace an element with a matching name that has delete notation in a previous model. For example, if Model 1 looks like:\ntopology: Server: !m1: and Model 2 looks like:\ntopology: Server: m1: ListenPort: 7000 Notes: \u0026#34;Server 1\u0026#34; The resulting model would be:\ntopology: Server: m1: ListenPort: 7000 Notes: \u0026#34;Server 1\u0026#34; "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/project-structure/",
	"title": "Project structure",
	"tags": [],
	"description": "",
	"content": "This project is structured using the Standard Directory Layout for Maven projects, with two child modules, core and installer. In addition, there is a samples directory with example configurations, and the site directory containing project documentation.\nThe core module contains the main source code for the project. This includes Jython modules and Java classes, as well as typedef files, alias definitions, and the message bundle. There are unit tests related to this module.\nAlias definitions are discussed in more detail here.\nThe installer module builds the final installer ZIP file. It includes the assembly definitions, start scripts for each tool for Linux and Windows platforms, and configurations for variable injection and logging.\nA single installer ZIP file is built under the WLSDEPLOY_HOME/installer/target directory.\nThere are detailed instructions for building the project here.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/",
	"title": "WDT Tools",
	"tags": [],
	"description": "",
	"content": "The Create Domain Tool (createDomain) understands how to create a domain and populate the domain with all resources and applications specified in the model.\nThe Update Domain Tool (updateDomain) understands how to update an existing domain and populate the domain with all resources and applications specified in the model, either in offline or online mode.\nThe Deploy Applications Tool (deployApps) understands how to add resources and applications to an existing domain, either in offline or online mode.\nThe Discover Domain Tool (discoverDomain) introspects an existing domain and creates a model file describing the domain and an archive file of the binaries deployed to the domain.\nThe Encrypt Model Tool (encryptModel) encrypts the passwords in a model (or its variable file) using a user-provided passphrase.\nThe Validate Model Tool (validateModel) provides both standalone validation of a model as well as model usage information to help users write or edit their models.\nThe Compare Model Tool (compareModel) compares two model files.\nThe Prepare Model Tool (prepareModel) prepares model files for deploying to WebLogic Kubernetes Operator environment.\nThe Extract Domain Resource Tool (extractDomainResource) generates a domain resource YAML for use with the WebLogic Kubernetes Operator.\nThe Variable Injector Tool is used to tokenize a model with variables.\nThe Model Help Tool (modelHelp.sh) provides information about the folders and attributes that are valid for sections and folders of a domain model.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/concepts/archive/",
	"title": "Archive File",
	"tags": [],
	"description": "",
	"content": "The archive file is used to deploy binaries and other file resources to the target domain. The archive is a ZIP file with a specific directory structure. Any file resources referenced in the model that are not already on the target system must be stored in the correct location in the archive, and the model must reflect the path into the archive. The model itself can also be stored inside the archive, if desired.\nNote that file resources that already exist on the target system need not be included in the archive, provided that the model specifies the correct location on the target system.\n Example Archive Structure Using Multiple Archive Files  Example This example shows an application with a SourcePath value referencing an EAR file resource contained in the archive.\nappDeployments: Application: simpleear : SourcePath: wlsdeploy/applications/simpleear.ear Target: \u0026#39;my-cluster\u0026#39; ModuleType: ear The example above shows the attribute SourcePath of the simpleear application with a value of wlsdeploy/applications/simpleear.ear. The prefix wlsdeploy/ indicates that the resource is located in the archive file in the specified location, and will be deployed to that directory in the domain, in this case \u0026lt;domain-home\u0026gt;/wlsdeploy/applications/simpleear.ear.\nArchive Structure These are the paths within the archive that are used for different types of resources. Users can create further directory structures underneath these locations to organize the files and directories as they see fit.\natpwallet The directory where a wallet can be stored for use with Oracle Autonomous Transaction Processing Cloud Database. The file resource name is not specified in the model, and is assumed to be a single ZIP file in the archive at this location.\nmodel The directory where the model is optionally located. Only one model file, either in YAML or JSON, is allowed, and it must have the appropriate YAML or JSON file extension.\nopsswallet The directory where a wallet can be stored for use with Oracle Platform Security Services. The file resource name is not specified in the model, and is assumed to be a single ZIP file in the archive at this location.\nwlsdeploy/applications The root directory under which applications are stored. Applications can be stored in the archive as EAR or WAR files, or expanded* under this folder. A sample expanded WAR application might have these entries:\nwlsdeploy/applications/myApp/index.jsp wlsdeploy/applications/myApp/META-INF/MANIFEST.MF wlsdeploy/applications/myApp/WEB-INF/classes/MyClass.class wlsdeploy/applications/myApp/WEB-INF/web.xml wlsdeploy/applications/myApp/WEB-INF/weblogic.xml * Expanded application directories are supported after WebLogic Deploy Tooling release 1.6.2\nwlsdeploy/classpathLibraries The root directory under which JARs/directories used for server classpaths are stored. Every file resource under this directory is extracted, even those not referenced in the model.\nwlsdeploy/coherence The root directory under which empty directories must exist for Coherence persistent stores.\nwlsdeploy/domainBin The root directory under which $DOMAIN_HOME/bin scripts are stored. Only scripts referenced in the domainInfo/domainBin section of the model are extracted.\nwlsdeploy/domainLibraries The root directory under which $DOMAIN_HOME/lib libraries are stored. Only libraries referenced in the domainInfo/domainLibraries section of the model are extracted.\nwlsdeploy/nodeManager The root directory under which node manager file resources, such as keystore files, are stored.\nwlsdeploy/scripts The root directory under which scripts are stored. These can include JDBC create scripts, and WLDF action scripts.\nwlsdeploy/servers The root directory under which server files, such as keystore files, are stored. These are organized by server name, such as wlsdeploy/server/my-server/mykey.jks\nwlsdeploy/sharedLibraries The root directory under which shared libraries are stored. These are stored as JAR files within the archive.\nwlsdeploy/stores The root directory under which empty directories must exist for FileStore elements in the model.\nUsing Multiple Archive Files The Create Domain, Update Domain, Deploy Applications, and Validate Model Tools allow the specification of multiple archive files on the command line. For example:\nweblogic-deploy\\bin\\createDomain.cmd -archive_file one.zip,two.zip,three.zip ...  File resources can be present in any of these archives. Resources in each archive will supersede resources found in previous archives.\nWhen the model references a resource that is present in multiple archives, the latest in the list takes precedence. For example, if the model references wlsdeploy/applications/myapp.ear, and that resource is present in archives one.zip and two.zip, the resource in two.zip will be used.\nA similar rule applies for resources that have an assumed location, but are not specifically called out in the model. For example, if archive two.zip has a wallet in location atpwallet/wallet2.zip, and three.zip has a wallet in location atpwallet/wallet3.zip, the wallet atpwallet/wallet3.zip will be used.\nResources that are extracted without being referenced directly are extracted from the archives in the order specified in the archive_file argument. For example, if one.zip and two.zip have resources under wlsdeploy/classpathLibraries, the resources in one.zip will be extracted to \u0026lt;domain-home\u0026gt;/wlsdeploy/classpathLibraries, then the resources of two.zip will be extracted to the same location, overwriting any overlapping files.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/feature-impl/",
	"title": "Feature implementation",
	"tags": [],
	"description": "",
	"content": "This document describes how specific features of WebLogic Deploy Tooling are implemented in the source code.\nCreator and Deployer class hierarchies The creation of individual folders and attributes within the topology section of the domain model is accomplished using subclasses of the Jython class Creator, in the module wlsdeploy.tool.create.creator.py. The Creator class provides base methods to recurse through nested folders in the domain model, create or update those folders, and set or update their attributes. Each subclass can override these methods to account for variations in behavior for different functional areas.\nFor example, the SecurityProviderCreator subclass overrides the method _create_named_subtype_mbeans with special processing to remove all existing security providers, and re-create them from the data in the model.\nThe update of folders and attributes in the resources section of the domain model follows a similar pattern, but the base class for these modules is Deployer in the module wlsdeploy.tool.deploy.deployer.py.\nThe class TopologyUpdater is a special subclass of Deployer that is used to update elements in the topology section after their initial creation.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/update/",
	"title": "Update Domain Tool",
	"tags": [],
	"description": "Understands how to update an existing domain and populate the domain with all resources and applications specified in the model, either in offline or online mode.",
	"content": "The Update Domain Tool uses a model, the archive, and WLST to update the configuration of an existing WebLogic Server domain, and to deploy applications and resources into the domain in either WLST online or offline mode. The update tool will add or re-configure elements from the topology section of the model, and deploy applications and resources from the resources and appDeployments sections, as described in the Deploy Applications Tool.\nThe Update Domain Tool will only add or update elements in the specified model. It will not attempt to remove any missing elements that were present in a previous model.\nRunning the Update Domain Tool in WLST offline mode is very similar to running the Create Domain Tool; simply provide the domain location and archive file, and separate model and variable files, if needed. For example:\nweblogic-deploy\\bin\\updateDomain.cmd -oracle_home c:\\wls12213 -domain_type WLS -domain_home domains\\DemoDomain -archive_file DemoDomain.zip -model_file DemoDomain.yaml -variable_file DemoDomain.properties  In WLST online mode, simply add the information on how to connect to the WebLogic Server Administration Server, for example:\nweblogic-deploy\\bin\\updateDomain.cmd -oracle_home c:\\wls12213 -domain_type WLS -domain_home domains\\DemoDomain -archive_file DemoDomain.zip -model_file DemoDomain.yaml -variable_file DemoDomain.properties -admin_url t3://127.0.0.1:7001 -admin_user weblogic  As usual, the tool will prompt for the password (it can also be supplied by piping it to standard input of the tool).\nUnlike the Create Domain Tool, the full domain home directory is specified, rather than the domain\u0026rsquo;s parent directory, because the domain has already been established.\nThe Update Domain Tool will not attempt to recreate or add schemas for the RCU database, for domain types that use RCU.\nWhen running the tool in WLST online mode, the update operation may require server restarts or a domain restart to pick up the changes. The update operation can also encounter situations where it cannot complete its operation until the domain is restarted. To communicate these conditions to scripts that may be calling the Update Domain Tool, the shell scripts have two special, non-zero exit codes to communicate these states:\n 103 - The entire domain needs to be restarted. 104 - The domain changes have been canceled because the changes in the model requires a domain restart and -cancel_changes_if_restart_required is specified.  Using an Encrypted Model If the model or variables file contains passwords encrypted with the WDT Encryption tool, decrypt the passwords during create with the -use_encryption flag on the command line to tell the Update Domain Tool that encryption is being used and to prompt for the encryption passphrase. As with the database passwords, the tool can also read the passphrase from standard input (for example, stdin) to allow the tool to run without any user input.\nUsing Multiple Models The Update Domain Tool supports the use of multiple models, as described in Using Multiple Models.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/",
	"title": "User Guide",
	"tags": [],
	"description": "",
	"content": "The User Guide provides detailed information about installing and using WebLogic Deploy Tools.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/alias-definitions/",
	"title": "Alias definitions",
	"tags": [],
	"description": "",
	"content": "WebLogic Deploy Tool uses a set of JSON configuration files to map folders and attributes in the model to the corresponding WLST MBeans and their attributes. These mappings are referred as \u0026lsquo;aliases\u0026rsquo; throughout the project code and documentation. Each element in the alias definition file has detailed properties that assist in this mapping.\nThe model\u0026rsquo;s folder and attribute names usually match the names of the corresponding elements in WLST. For cases where the names of WLST elements may change across WebLogic Server releases, the names should match the names in the 12.2.1.3 release. The unit test AttributesTestCase verifies that this convention is used, and identifies a few exceptions.\nAttributes that are introduced after the 12.2.1.3 release should, in most cases, match the name of the first WebLogic Server release in which they appear. The unit test AttributesTestCase will ignore these for now, because they will not be present in the 12.2.1.3 alias structure.\nThe alias definition files reside in the directory:\n$WLSDEPLOY_HOME/core/src/main/resources/oracle/weblogic/deploy/aliases/category_module\nEach definition file corresponds to a second-level folder within the model, such as JDBCSystemResource. Any elements below a second-level folder are defined in the file of that parent. For example, the model element resources/JDBCSystemResource/JdbcResource/JDBCConnectionPoolParams is described in JDBCSystemResource.json.\nTop-level elements such as topology and resources are for organizational purposes, and are not represented in the alias definition files.\nNo elements in the domainInfo section of the model are represented in the alias definitions, because they don\u0026rsquo;t correspond directly to WLST elements.\nThis example, from the file JDBCSystemResource.json, will be used as a reference in the descriptions below:\n{ \u0026#34;copyright\u0026#34;: \u0026#34;Copyright (c) 2017, 2018, Oracle Corporation and/or its affiliates. All rights reserved.\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl\u0026#34;, \u0026#34;wlst_type\u0026#34;: \u0026#34;JDBCSystemResource${:s}\u0026#34;, \u0026#34;child_folders_type\u0026#34;: \u0026#34;multiple\u0026#34;, \u0026#34;folders\u0026#34;: { \u0026#34;JdbcResource\u0026#34; : { \u0026#34;wlst_type\u0026#34;: \u0026#34;${Jdbc:JDBC}Resource\u0026#34;, \u0026#34;folders\u0026#34;: { \u0026#34;JDBCConnectionPoolParams\u0026#34;: { \u0026#34;wlst_type\u0026#34;: \u0026#34;JDBCConnectionPoolParams\u0026#34;, \u0026#34;folders\u0026#34;: {}, \u0026#34;attributes\u0026#34;: { \u0026#34;CapacityIncrement\u0026#34;: [ {\u0026#34;version\u0026#34;: \u0026#34;[10,)\u0026#34;, \u0026#34;wlst_mode\u0026#34;: \u0026#34;both\u0026#34;, \u0026#34;wlst_name\u0026#34;: \u0026#34;CapacityIncrement\u0026#34;, \u0026#34;wlst_path\u0026#34;: \u0026#34;WP001\u0026#34;, \u0026#34;value\u0026#34;: {\u0026#34;default\u0026#34;: \u0026#34;${None:1}\u0026#34;}, \u0026#34;wlst_type\u0026#34;: \u0026#34;integer\u0026#34;, \u0026#34;get_method\u0026#34;: \u0026#34;LSA\u0026#34;} ], \u0026#34;ConnectionCreationRetryFrequencySeconds\u0026#34;: [ {\u0026#34;version\u0026#34;: \u0026#34;[10,)\u0026#34;, \u0026#34;wlst_mode\u0026#34;: \u0026#34;both\u0026#34;, \u0026#34;wlst_name\u0026#34;: \u0026#34;ConnectionCreationRetryFrequencySeconds\u0026#34;, \u0026#34;wlst_path\u0026#34;: \u0026#34;WP001\u0026#34;, \u0026#34;value\u0026#34;: {\u0026#34;default\u0026#34;: \u0026#34;${None:0}\u0026#34;}, \u0026#34;wlst_type\u0026#34;: \u0026#34;integer\u0026#34;, \u0026#34;get_method\u0026#34;: \u0026#34;LSA\u0026#34;} ] }, \u0026#34;wlst_attributes_path\u0026#34;: \u0026#34;WP001\u0026#34;, \u0026#34;wlst_paths\u0026#34;: { \u0026#34;WP001\u0026#34;: \u0026#34;/JDBCSystemResource${:s}/%DATASOURCE%/${Jdbc:JDBC}Resource/%DATASOURCE%/JDBCConnectionPoolParams/${NO_NAME_0:%DATASOURCE%}\u0026#34; } }, ... Conventions Notations similar to ${Jdbc:JDBC}Resource appear throughout this example, and other alias definition files. It is shorthand for the common situation where a value is different between offline and online WLST. The value before the colon is used in offline processing, and the value after is used for online. In this example, the value for wlst_type is JdbcResource in offline, and JDBCResource in online. This notation can be used for values in most places in the model. It cannot be used for key values, such as wlst_type.\nKeys for top level and folders elements These JSON keys are applicable for the top-level element (such as JDBCSystemResource), and each of its nested folders elements (such as JdbcResource and JdbcResource/JDBCConnectionPoolParams.\nwlst_type This value is the type name of the WLST MBean that corresponds to a model folder. The ${x:y} notation described above is often used here to distinguish offline and online folder names.\nchild_folders_type This value specifies how the tool will map the domain model element to one or more WLST MBeans. The values are:\n  single (default) - this element represents a single MBean, and the MBean name is known.\n  single-unpredictable - this element represents a single MBean, but the MBean name must be derived at runtime.\n  multiple - this element contains multiple named elements (such as dataSource1, dataSource2), and each represents a single MBean.\n  folders Nested WLST MBean types for the current MBean are listed here. Each has a domain model type name, followed by its own JSON keyed elements.\nwlst_attributes_path This key element specifies the name of the path expression used for navigating to the MBean attributes folder. The actual path expression is defined later in the \u0026quot;wlst_paths\u0026quot;: { } element.\nwlst_paths The dictionary key defines the various WLST path values used elsewhere in this folder\u0026rsquo;s definition. Each entry maps a name to a full WLST MBean path. In this example, JDBCConnectionPoolParams has a single path:\n\u0026quot;WP001\u0026quot;: \u0026quot;/JDBCSystemResource${:s}/%DATASOURCE%/${Jdbc:JDBC}Resource/%DATASOURCE%/JDBCConnectionPoolParams/${NO_NAME_0:%DATASOURCE%}\u0026quot;\nThe %DATASOURCE% text is token placeholder. It will be replaced with the name of the actual data source by the tool.\nKeys for attributes Elements Each child of an attributes element represents a single MBean attribute, and its key is the corresponding model name, such as CapacityIncrement. It contains at least one description element with the JSON keys below. There may be multiple description elements for cases where the configuration varies for different WebLogic Server version ranges, or varies between offline and online WLST.\nversion This key element defines the applicable versions for a particular MBean attribute description. Maven versioning conventions are used to describe ranges and limits. For example:\n\u0026quot;version\u0026quot;: \u0026quot;[10,)\u0026quot;\nSpecifies that an MBean attribute description is relevant for WebLogic Server version 10 and later\nwlst_mode This key element specifies the WLST modes that are applicable for an MBean attribute description. The value can be \u0026ldquo;offline\u0026rdquo;, \u0026ldquo;online\u0026rdquo;, or \u0026ldquo;both\u0026rdquo;.\nwlst_name This key element specifies the WLST name of the MBean attribute.\nwlst_type This key element specifies the data type used to set the WLST MBean attribute. Valid values are integer, long, string, delimited_string, boolean and jarray. If the wlst_read_type is not set, this is also the data type used to read the value from WLST.\nwlst_read_type This key element specifies the data type used to read the WLST MBean attribute. If it is not specified, the value of wlst_type is used for the read.\nget_method This key element specifies which method should be used for retrieving the value the MBean attribute. Valid values are:\n GET use the WLST get method to retrieve the value of the attribute LSA use ls(type=\u0026lsquo;a\u0026rsquo;) to retrieve the value of the attribute NONE do not retrieve the attribute value  access By default, an attribute is read write in both WLST and MODEL. This element is used to set an attribute to read-only. The two read-only attributes are RO and ROD. The latter indicates that the attribute is read-only and will not be written into the domain. However, it will be discovered by the discover tool into the model.\npreferred_model_type This key element specifies the preferred data type that should be used to put data in the model during discovery. As an example, list values can be represented in the model as comma-separated text, such as \u0026quot;value1, value2\u0026quot;, or as a YAML list, such as [\u0026quot;value1\u0026quot;, \u0026quot;value2\u0026quot;]. If the list values can contain commas, it is preferred to use a YAML list.\nwlst_path This key element specifies the name of the path expression used for navigating to the MBean attribute\u0026rsquo;s folder. This name maps to an entry in the parent folder\u0026rsquo;s \u0026quot;wlst_paths\u0026quot;: { } list.\nvalue This key element is used to specify the default value of the MBean attribute. For example:\n\u0026quot;value\u0026quot;: {\u0026quot;default\u0026quot;: \u0026quot;${None:1}\u0026quot;}\nset_method For cases where attributes cannot be set with simple types, it may be necessary to use a custom method to set the value. For example, most Target attributes require their values to be set as lists of MBeans, in online mode. This may be defined as:\n\u0026#34;attributes\u0026#34;: { \u0026#34;Target\u0026#34;: [ { \u0026#34;set_method\u0026#34;: \u0026#34;MBEAN.set_target_mbeans\u0026#34;, \u0026#34;set_mbean_type\u0026#34;: \u0026#34;weblogic.management.configuration.TargetMBean\u0026#34;} ], }, The method set_target_mbeans directs the tool to call the Jython method attribute_setter.set_target_mbeans to set this value.\nset_mbean_type When a set_method key is specified, it may be required to specify the MBean type for the set method to use (see the example under set_method).\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/deploy/",
	"title": "Deploy Applications Tool",
	"tags": [],
	"description": "Understands how to add resources and applications to an existing domain, either in offline or online mode.",
	"content": "The Deploy Applications Tool uses a model, the archive, and WLST to deploy applications and resources into an existing WebLogic Server domain in either WLST online or offline mode. When deploying applications and resources from a model, the deploy tool focuses primarily on the resources and appDeployments sections of the model. There are exceptions for the domainInfo and topology sections, where those configuration elements are deemed to be \u0026ldquo;application-related.\u0026rdquo; For example, the servers' ServerStart folder has an Arguments and a ClassPath attribute that change the server environment (when started by the Node Manager) that applications may rely on to function properly. Likewise, the domainInfo section contains a list of JAR files that are to be placed in \u0026lt;DOMAIN_HOME\u0026gt;/lib which are relevant to applications for a similar reason.\nThe Deploy Applications Tool will only add or update elements in the specified model. It will not attempt to remove any missing elements that were present in a previous model.\nIn WLST online mode, the tool tries to minimize the need to redeploy the applications and shared libraries, and the need to restart the server. It does this in a few ways:\n If the model references an application or shared library that is already deployed, the tool compares the binaries to determine whether redeployment is required. Redeployment of shared libraries is particularly expensive since all applications using the shared library must be redeployed\u0026ndash;even if the application has not changed. It looks at the knowledge base to determine which attributes require restart when they are changed. If an attribute requires restart, the tool compares the current and model values to make sure that they are different before trying to apply a change.  The goal is to make the tool both able to support iterative deployment and able to minimize service disruption while doing its work when working against a running domain.\nRunning the Deploy Applications Tool in WLST offline mode is very similar to running the Create Domain Tool; simply provide the domain location and archive file, and separate model and variable files, if needed. For example:\nweblogic-deploy\\bin\\deployApps.cmd -oracle_home c:\\wls12213 -domain_home domains\\DemoDomain -archive_file DemoDomain.zip -model_file DemoDomain.yaml -variable_file DemoDomain.properties  To run the tool in online mode, add the -admin_url and admin_user arguments with the necessary values to connect to the WebLogic Server Administration Server. For example:\nweblogic-deploy\\bin\\deployApps.cmd -oracle_home c:\\wls12213 -domain_home domains\\DemoDomain -archive_file DemoDomain.zip -model_file DemoDomain.yaml -variable_file DemoDomain.properties -admin_url t3://127.0.0.1:7001 -admin_user weblogic  As usual, the tool will prompt for the password (it can also be supplied by piping it to standard input of the tool).\nWhen running the tool in WLST online mode, the deploy operation may require server restarts or a domain restart to pick up the changes. The deploy operation can also encounter situations where it cannot complete its operation until the domain is restarted. To communicate these conditions to scripts that may be calling the Deploy Applications Tool, the shell scripts have three special, non-zero exit codes to communicate these states:\n 103 - The entire domain needs to be restarted. 104 - The domain changes have been canceled because the changes in the model requires a domain restart and -cancel_changes_if_restart_required is specified.  Using an Encrypted Model If the model or variables file contains passwords encrypted with the WDT Encryption tool, decrypt the passwords during create with the -use_encryption flag on the command line to tell the Deploy Applications Tool that encryption is being used and to prompt for the encryption passphrase. As with the database passwords, the tool can also read the passphrase from standard input (for example, stdin) to allow the tool to run without any user input.\nUsing Multiple Models The Deploy Applications Tool supports the use of multiple models, as described in Using Multiple Models.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/concepts/use_cases/",
	"title": "Model Use Cases",
	"tags": [],
	"description": "",
	"content": "Contents  Customizing the Administration Server Modeling a Configured Cluster Modeling a JDBC Data Source Modeling a Work Manager Modeling Security Providers Modeling WebLogic Users, Groups, and Roles Modeling WebLogic User Password Credential Mapping Modeling ODL Modeling Oracle HTTP Server (OHS) Targeting Server Groups Using WDT with WebLogic Kubernetes Operator  Administration Server Configuration The Create Domain Tool allows you to configure the Administration Server using a domain model. These examples show how some common configurations can be represented in the model.\nUsing the Default Administration Server Configuration When the Create Domain Tool is run, the templates associated with your domain type will automatically create an Administration Server named AdminServer, with default values for all the attributes. If you don\u0026rsquo;t need to change any of these attributes, such as ListenAddress or ListenPort, or any of the sub-folders, such as SSL or ServerStart, nothing needs to be added to the model.\nCustomizing the Administration Server Configuration To customize the configuration of the default Administration Server, you will need to add a server with the default name AdminServer. Because you are not changing the name of the Administration Server, there is no need to specify the AdminServerName attribute under the topology section. This example shows some attributes and sub-folders:\ntopology: Server: AdminServer: ListenPort: 9071 RestartDelaySeconds: 10 ListenAddress: \u0026#39;my-host-1\u0026#39; Log: FileCount: 9 LogFileSeverity: Info FileMinSize: 5000 SSL: HostnameVerificationIgnored: true JSSEEnabled: true ListenPort: 9072 Enabled: true The most common problem with this type of configuration is to misspell the name of the folder under Server, when it should be AdminServer. This will result in the creation of an Administration Server with the default name, and an additional Managed Server with the misspelled name.\nConfiguring the Administration Server with a Different Name If you want the Administration Server to have a name other than the default AdminServer, you will need to specify that name in the AdminServerName attribute, and use that name in the Server section. This example uses the name my-admin-server:\ntopology: AdminServerName: \u0026#39;my-admin-server\u0026#39; Server: \u0026#39;my-admin-server\u0026#39;: ListenPort: 9071 RestartDelaySeconds: 10 ListenAddress: \u0026#39;my-host-1\u0026#39; Log: FileCount: 9 LogFileSeverity: Info FileMinSize: 5000 SSL: HostnameVerificationIgnored: true JSSEEnabled: true ListenPort: 9072 Enabled: true The most common problem with this type of configuration is to mismatch the AdminServerName attribute with the name in the Server folder. This will change the name of the default Administration Server to the value of AdminServerName, and the folder under Server to be created as an additional Managed Server.\nThe name of the Administration Server cannot be changed after domain creation, so any changes to the AdminServerName attribute will be ignored by the Update Domain Tool.\nConfigured Cluster Sample This WDT domain model sample section has a typical configuration for a configured cluster with a single managed server, including connection information, logging setup, and other details.\ntopology: Cluster: \u0026#39;cluster-1\u0026#39;: ClientCertProxyEnabled: true AutoMigrationTableName: MIGRATION_1 DataSourceForAutomaticMigration: \u0026#39;jdbc-1\u0026#39; ClusterMessagingMode: unicast FrontendHost: frontend.com FrontendHTTPPort: 9001 FrontendHTTPSPort: 9002 MigrationBasis: database NumberOfServersInClusterAddress: 5 WeblogicPluginEnabled: true Server: \u0026#39;server-1\u0026#39;: Cluster: \u0026#39;cluster-1\u0026#39; # this server belongs to cluster-1 ListenAddress: 127.0.0.1 ListenPort: 8001 Machine: \u0026#39;machine-1\u0026#39; Log: DomainLogBroadcastSeverity: Error FileCount: 7 FileMinSize: 5000 FileName: \u0026#39;logs/AdminServer.log\u0026#39; LogFileSeverity: Info MemoryBufferSeverity: Notice NumberOfFilesLimited: true RotateLogOnStartup: true RotationType: bySize SSL: Enabled: true ListenPort: 8002 ServerStart: Arguments: \u0026#39;-Dosgi=true -Dtangosol.coherence.management=all\u0026#39; ClassPath: \u0026#39;/foo/bar,wlsdeploy/classpathLibraries/mylib.jar\u0026#39; There are additional sub-folders and attributes available for more configuration options. These can be determined using the Model Help Tool. For example, this command will list the attributes and sub-folders for the Server folder:\n${WDT_HOME}/bin/modelHelp.sh -oracle_home /tmp/oracle topology:/Server For this sample, the machine named machine-1 and the data source named jdbc-1 should be defined elsewhere within this model, or should already exist in a domain that is being updated.\nJDBC Sample This WDT domain model sample section has a typical configuration for a JDBC data source, including targeting information, connection pool parameters, and other details.\nresources: JDBCSystemResource: \u0026#39;datasource-1\u0026#39;: Target: \u0026#39;AdminServer,cluster-1\u0026#39; JdbcResource: DatasourceType: GENERIC JDBCConnectionPoolParams: ConnectionReserveTimeoutSeconds: 10 InitialCapacity: 0 MaxCapacity: 5 MinCapacity: 0 TestConnectionsOnReserve: true TestTableName: SQL ISVALID JDBCDriverParams: DriverName: oracle.jdbc.OracleDriver PasswordEncrypted: \u0026#39;@@PROP:jdbc.password@@\u0026#39; URL: \u0026#39;jdbc:oracle:thin:@//localhost:1521/myDB\u0026#39; Properties: user: Value: scott There are additional sub-folders and attributes available for more configuration options. These can be determined using the Model Help Tool. For example, this command will list the attributes and sub-folders for the JDBCSystemResource/JdbcResource folder:\n${WDT_HOME}/bin/modelHelp.sh -oracle_home /tmp/oracle resources:/JDBCSystemResource/JdbcResource For this sample, the target cluster cluster-1 should be defined elsewhere within this model, or should already exist in a domain that is being updated.\nIt is recommended that credential fields, such as PasswordEncrypted, should not be stored as clear text in the model. Those values can be referenced in a separate variables file or in Kubernetes secrets, or the model can be encrypted using the Encrypt Model Tool.\nWork Manager Sample This WDT domain model sample section has typical configurations for a Work Manager and its related request classes and constraints. These elements are configured in the SelfTuning folder in the resources section of the model.\nresources: SelfTuning: Capacity: capacity40: Target: \u0026#39;cluster-1\u0026#39; Count: 40 MaxThreadsConstraint: threeMax: Target: \u0026#39;cluster-1\u0026#39; Count: 3 MinThreadsConstraint: twoMin: Target: \u0026#39;cluster-1\u0026#39; Count: 2 FairShareRequestClass: appFairShare: Target: \u0026#39;cluster-1\u0026#39; FairShare: 50 highFairshare: Target: \u0026#39;cluster-1\u0026#39; FairShare: 80 lowFairshare: Target: \u0026#39;cluster-1\u0026#39; FairShare: 20 ResponseTimeRequestClass: fiveSecondResponse: Target: \u0026#39;cluster-1\u0026#39; GoalMs: 5000 ContextRequestClass: appContextRequest: Target: \u0026#39;cluster-1\u0026#39; ContextCase: Case1: GroupName: Administrators RequestClassName: highFairshare Target: \u0026#39;cluster-1\u0026#39; Case2: UserName: weblogic RequestClassName: lowFairshare Target: \u0026#39;cluster-1\u0026#39; WorkManager: myWorkManager: Capacity: capacity40 ContextRequestClass: appContextRequest # FairShareRequestClass: appFairShare IgnoreStuckThreads: true MaxThreadsConstraint: threeMax MinThreadsConstraint: twoMin # ResponseTimeRequestClass: fiveSecondResponse Target: \u0026#39;cluster-1\u0026#39; In this sample, assignments for FairShareRequestClass and ResponseTimeRequestClass are included as comments under myWorkManager. A Work Manager can only specify one request class type.\nThere are additional sub-folders and attributes available for more configuration options. These can be determined using the Model Help Tool. For example, this command will list the attributes and sub-folders for the WorkManager folder:\n${WDT_HOME}/bin/modelHelp.sh -oracle_home /tmp/oracle resources:/WorkManager For this sample, the target cluster cluster-1 should be defined elsewhere within this model, or should already exist in a domain that is being updated.\nModeling Security Providers WebLogic Server security configuration requires special handling and causes the need for the model semantics to differ from other folders. Because provider ordering is important, and to make sure that the ordering is correctly set in the newly created domain, the Create Domain Tool and Update Domain Tool require that all providers be specified in the model for any provider type that will be created or altered. For example, if you want to change one of the providers in the provider type AuthenticationProvider, your model must specify all of the AuthenticationProvider providers and any non-default attributes for those providers. In order to apply security providers, these tools will delete all providers from the target domain for those provider types specified in the model before adding the providers from the model to the target domain. Provider types that are omitted from the model will be unchanged. Example provider types are Adjudicator, AuthenticationProvider, Authorizer, CertPathProvider, CredentialMapper, PasswordValidator, and RoleMapper.\nFor example, if the model specified an LDAPAuthenticator and an LDAPX509IdentityAsserter similar to what is shown below, the DefaultAuthenticator and DefaultIdentityAsserter would be deleted. In this example, other provider types like RoleMapper and CredentialMapper are not specified and would be left untouched by the tools.\ntopology: SecurityConfiguration: Realm: myrealm: AuthenticationProvider: My LDAP authenticator: LDAPAuthenticator: ControlFlag: SUFFICIENT PropagateCauseForLoginException: true EnableGroupMembershipLookupHierarchyCaching: true Host: myldap.example.com Port: 389 UserObjectClass: person GroupHierarchyCacheTTL: 600 SSLEnabled: true UserNameAttribute: cn Principal: \u0026#39;cn=foo,ou=users,dc=example,dc=com\u0026#39; UserBaseDn: \u0026#39;OU=Users,DC=example,DC=com\u0026#39; UserSearchScope: subtree UserFromNameFilter: \u0026#39;(\u0026amp;(cn=%u)(objectclass=person))\u0026#39; AllUsersFilter: \u0026#39;(memberOf=CN=foo,OU=mygroups,DC=example,DC=com)\u0026#39; GroupBaseDN: \u0026#39;OU=mygroups,DC=example,DC=com\u0026#39; AllGroupsFilter: \u0026#39;(\u0026amp;(foo)(objectclass=group))\u0026#39; StaticGroupObjectClass: group StaticMemberDNAttribute: cn StaticGroupDNsfromMemberDNFilter: \u0026#39;(\u0026amp;(member=%M)(objectclass=group))\u0026#39; DynamicGroupObjectClass: group DynamicGroupNameAttribute: cn UseRetrievedUserNameAsPrincipal: true KeepAliveEnabled: true GuidAttribute: uuid My LDAP IdentityAsserter: LDAPX509IdentityAsserter: ActiveType: AuthenticatedUser Host: myldap.example.com Port: 389 SSLEnabled: true In order to keep the DefaultAuthenticator and DefaultIdentityAsserter while changing/adding providers, they must be specified in the model with any non-default attributes as shown in the example below. Keep in mind, the ordering of providers in the model will be the order the providers are set in the WebLogic security configuration.\ntopology: SecurityConfiguration: Realm: myrealm: AuthenticationProvider: My LDAP authenticator: LDAPAuthenticator: ControlFlag: SUFFICIENT PropagateCauseForLoginException: true EnableGroupMembershipLookupHierarchyCaching: true Host: myldap.example.com Port: 389 UserObjectClass: person GroupHierarchyCacheTTL: 600 SSLEnabled: true UserNameAttribute: cn Principal: \u0026#39;cn=foo,ou=users,dc=example,dc=com\u0026#39; UserBaseDn: \u0026#39;OU=Users,DC=example,DC=com\u0026#39; UserSearchScope: subtree UserFromNameFilter: \u0026#39;(\u0026amp;(cn=%u)(objectclass=person))\u0026#39; AllUsersFilter: \u0026#39;(memberOf=CN=foo,OU=mygroups,DC=example,DC=com)\u0026#39; GroupBaseDN: \u0026#39;OU=mygroups,DC=example,DC=com\u0026#39; AllGroupsFilter: \u0026#39;(\u0026amp;(foo)(objectclass=group))\u0026#39; StaticGroupObjectClass: group StaticMemberDNAttribute: cn StaticGroupDNsfromMemberDNFilter: \u0026#39;(\u0026amp;(member=%M)(objectclass=group))\u0026#39; DynamicGroupObjectClass: group DynamicGroupNameAttribute: cn UseRetrievedUserNameAsPrincipal: true KeepAliveEnabled: true GuidAttribute: uuid My LDAP IdentityAsserter: LDAPX509IdentityAsserter: ActiveType: AuthenticatedUser Host: myldap.example.com Port: 389 SSLEnabled: true DefaultAuthenticator: DefaultAuthenticator: ControlFlag: SUFFICIENT DefaultIdentityAsserter: DefaultIdentityAsserter: Trust Service Identity Asserter NOTE: The Trust Identity Asserter Security Provider is installed by JRF in 12c versions and newer.\nThe JRF installed Trust Identity Asserter does not supply a schema file by default. Before you can configure this asserter with WLST offline or WDT offline, you must first build the schema file using the prepareCustomProvider script.\nHere is an example of how to prepare and install a schema file from its MBean Jar File (MJF):\nexport CONFIG_JVM_ARGS=-DSchemaTypeSystemName=TrustServiceIdentityAsserter ORACLE_HOME/oracle_common/common/bin/prepareCustomProvider.sh -mjf=ORACLE_HOME/oracle_common/modules/oracle.jps/jps-wls-trustprovider.jar -out ORACLE_HOME/oracle_common/lib/schematypes/jps-wls-trustprovider.schema.jar For FMW versions 12.1.2 and 12.1.3, replace oracle.jps in the example path above with: oracle.jps_12.1.2, or oracle.jps_12.1.3, respectively.\nCustom Security Providers NOTE: Creating and updating domains with custom security providers is limited to WebLogic version 12.1.2 and newer.\nPrior to using this tooling to create or update a domain with a custom security provider, there are several prerequisites. First, WebLogic Server requires the custom MBean JAR to be in the Oracle Home directory before it can be configured, WLSERVER/server/lib/mbeantypes. Second, WebLogic Scripting Tool, WLST, requires that the schema JAR be placed in the Oracle Home directory before WLST offline can be used to discover it or configure it, ORACLEHOME/oracle_common/lib/schematypes. Generating an MBean JAR documentation can be found in the WebLogic Server documentation. Generating the schema JAR can be done with the prepareCustomProvider script provided in the WebLogic Server installation.\nWebLogic allows you to define an alternate directory other than WLSERVER/server/lib/mbeantypes by using the system property -Dweblogic.alternateTypesDirectory=dir. In order for the custom provider jars to be loaded correctly by WLST when discovering or configuring a domain, set this system property in the WLSDEPLOY_PROPERTIES environment variable.\nThe format for a custom security provider is slightly different from a built-in provider in that the custom provider must supply the fully-qualified name of the class for the provider in the model between the provider name and the attributes for that provider. Note that the generated Impl suffix is omitted from the name. In the custom CredentialMapper example below, note the location in the model of \u0026lsquo;examples.security.providers.SampleCredentialMapper\u0026rsquo;:\nCredentialMapper: \u0026#39;Sample CredentialMapper\u0026#39;: \u0026#39;examples.security.providers.SampleCredentialMapper\u0026#39;: UserNameMapperClassName: \u0026#39;examples.security.providers.CredentialMapperProviderImpl\u0026#39; CredentialMappingDeploymentEnabled: true: Known Limitations  Adjudicator provider types cannot be added or modified due to a limitation in WLST. PasswordCredentials provider types cannot be updated in WLST online.  Modeling WebLogic Users, Groups, and Roles WebLogic Server has the ability to establish a set of users, groups, and global roles as part of the WebLogic domain creation. The WebLogic global roles become part of the WebLogic role mapper (i.e. XACMLRoleMapper) and are specified under domainInfo in the WLSRoles section. The users and groups become part of the Embedded LDAP server (i.e. DefaultAuthenticator) and are specified under topology in the Security section.\nWebLogic Global Roles The model allows for the definition of WebLogic roles that can augment the well known WebLogic global roles (e.g. Admin, Deployer, Monitor, \u0026hellip;) in addition to defining new roles. When updating the well known WebLogic roles, an UpdateMode can be specified as { append | prepend | replace } with the default being replace when not specified. Also, when updating the well known roles, the specified Expression will be a logical OR with the default expression. The Expression value for the role is the same as when using the WebLogic RoleEditorMBean for a WebLogic security role mapping provider.\nFor example, the WLSRoles section below updates the well known Admin, Deployer and Monitor roles while adding a new global role with Tester as the role name:\ndomainInfo: WLSRoles: Admin: UpdateMode: append Expression: \u0026#34;?weblogic.entitlement.rules.IDCSAppRoleName(AppAdmin,@@PROP:AppName@@)\u0026#34; Deployer: UpdateMode: replace Expression: \u0026#34;?weblogic.entitlement.rules.AdministrativeGroup(@@PROP:Deployers@@)\u0026#34; Monitor: UpdateMode: prepend Expression: \u0026#34;?weblogic.entitlement.rules.AdministrativeGroup(AppMonitors)\u0026#34; Tester: Expression: \u0026#34;?weblogic.entitlement.rules.IDCSAppRoleName(AppTester,@@PROP:AppName@@)\u0026#34; The Admin role will have the expression appended to the default expression, the Deployer role expression will replace the default, the Monitor role expression will be prepended to the default expression and Tester will be a new role with the specified expression.\nIn addition, the Expression value can use the variable placeholder syntax specified when running the Create Tool as shown in the above example.\nWebLogic Users and Groups The model allows for the definition of a set of users and groups that will be loaded into the WebLogic Embedded LDAP Server (i.e. DefaultAuthenticator). New groups can be specified and users can be added as members of the new groups or existing groups such as the Administrators group which is defaulted to be in the WebLogic Admin global role. Please see known limitations below for additional information on users and groups.\nThe user password can be specified with a placeholder or encrypted with the Encrypt Tool. An example Security section that adds an additional group AppMonitors, adds two new users and places the users into groups is as follows:\ntopology: Security: Group: AppMonitors: Description: Application Monitors User: john: Password: welcome1 GroupMemberOf: [ AppMonitors, Administrators ] joe: Password: welcome1 GroupMemberOf: [ AppMonitors ] Known Limitations  The processing of users, groups, and roles will only take place when using the Create Domain Tool WebLogic global roles are only supported with WebLogic Server version 12.2.1 or greater WebLogic global roles are only updated for the WebLogic security XACML role mapping provider (i.e. XACMLRoleMapper) The user and group processing is not complete, currently, users cannot be assigned to groups. Users created using the Security section are automatically added to the Administrators group and are not added to the groups specified. See Known Issues for information about a patch for this issue.  Modeling WebLogic User Password Credential Mapping The Create Domain Tool can be used to create user password credential mappings for use with the DefaultCredentialMapper security provider. Information in the model will be used to create a credential mapping file that will be imported the first time the Administration Server is started. This example shows how mappings are represented in the model:\ndomainInfo: WLSUserPasswordCredentialMappings: CrossDomain: map1: RemoteDomain: otherDomain RemoteUser: otherUser RemotePassword: \u0026#39;@@PROP:other.pwd@@\u0026#39; RemoteResource: map2: Protocol: http RemoteHost: remote.host RemotePort: 7020 Path: /app/buy Method: POST User: user1 RemoteUser: remoteUser RemotePassword: \u0026#39;@@PROP:remote.pwd@@\u0026#39; map3: Protocol: https RemoteHost: remote2.host RemotePort: 7030 Path: /app/sell Method: GET User: \u0026#39;user1,user2\u0026#39; RemoteUser: remoteUser2 RemotePassword: \u0026#39;@@PROP:remote2.pwd@@\u0026#39; In this example, the mapping map1 creates a cross-domain credential mapping that provides access from this domain to the remote domain otherDomain as the user otherUser with the configured password.\nThe mapping map2 creates a remote resource credential mapping that will give the local user user1 access to a single remote resource on remote.host as the user remoteUser with the configured password. The mapping map3 is similar, but provides access to a different remote resource for two local users, user1 and user2.\nThe names of the mapping sections in the model, such as map1 and map2, are used to group the attributes for each mapping in the model and are not part of the resulting credential mappings. These names should be unique for each mapping of a particular type.\nODL Configuration Oracle Diagnostic Logging (ODL) can be configured and updated with Create Domain, Update Domain, and Deploy Applications Tools, starting with WDT release 1.5.2. ODL configuration is only supported for offline mode in WDT. ODL configuration is not added when a model is created using the Discover Domain Tool. This example shows how some common configuration elements can be represented in the model.\nresources: ODLConfiguration: config1: Servers: \u0026#34;m1, m2\u0026#34; AddJvmNumber: true HandlerDefaults: abc: r123 xyz: k890 Handler: \u0026#39;my-handler\u0026#39;: Class: \u0026#39;com.my.MyHandler\u0026#39; Level: \u0026#39;TRACE:32\u0026#39; ErrorManager: \u0026#39;com.my.MyErrorManager\u0026#39; Filter: \u0026#39;com.my.MyFilter\u0026#39; Formatter: \u0026#39;com.my.MyFormatter\u0026#39; Encoding: \u0026#39;UTF-8\u0026#39; Properties: \u0026#39;path\u0026#39;: \u0026#39;/home/me/mypath\u0026#34; \u0026#39;quicktrace-handler\u0026#39;: Filter: \u0026#39;oracle:dfw:incident:IncidentDetectionLogFilter\u0026#39; Properties: path: \u0026#39;${domain.home}/servers/${weblogic.Name}/logs/${weblogic.Name}-myhistory.log\u0026#39; useSourceClassandMethod: \u0026#39;true\u0026#39; Logger: \u0026#39;my-logger\u0026#39;: Level: \u0026#39;NOTIFICATION:1\u0026#39; UseParentHandlers: true Filter: \u0026#39;oracle:dfw:incident:IncidentDetectionLogFilter\u0026#39; Handlers: \u0026#39;richard-handler,owsm-message-handler\u0026#39; \u0026#39;oracle.sysman\u0026#39;: Handlers: [ \u0026#39;my-handler\u0026#39;, \u0026#39;owsm-message-handler\u0026#39; ] config2: Servers: \u0026#39;AdminServer\u0026#39; HandlerDefaults: path: \u0026#39;/home/me/otherpath\u0026#39; maxFileSize: 5242880 Each named ODL configuration (such as config1) is updated for each of the managed servers in the Servers list. Handlers and loggers that exist in the current configuration are updated, and any new ones are created and updated.\nUnlike other WDT model elements, ODL configuration is not updated using WLST MBeans. The configuration is written directly to the file system, in the file \u0026lt;domain_home\u0026gt;/config/fmwconfig/servers/\u0026lt;server\u0026gt;/logging.xml.\nConfiguring Oracle HTTP Server Starting with WDT 1.8.0, you can configure and update Oracle HTTP Server (OHS) using the Create Domain, Update Domain, and Deploy Applications Tools, in offline mode only. To discover the OHS configuration, use the Discover Domain Tool, in offline mode only.\nPrerequisites In order to configure and use OHS, it must be installed in the Oracle Home directory used to create the domain. You can download OHS here.\nThe OHS template must be present in the WDT domain type definition file used to create or update the domain. For more information on creating a custom definition, see Domain Type Definitions.\nYou create a copy of an existing domain type definition file, add the template to that file, and then reference that file on the WDT command line. For example, if you want to create a domain with Oracle HTTP Server based on a Restricted JRF domain, then you would first create a copy of the file WLSDEPLOY_HOME/lib/typedefs/RestrictedJRF.json in the same directory, such as WLSDEPLOY_HOME/lib/typedefs/HttpServer.json. In this example, you would change the existing extensionTemplates section to include the additional OHS template. The original value is:\n\u0026quot;extensionTemplates\u0026quot;: [ \u0026quot;Oracle Restricted JRF\u0026quot;, \u0026quot;Oracle Enterprise Manager-Restricted JRF\u0026quot; ], The revised value would be:\n\u0026quot;extensionTemplates\u0026quot;: [ \u0026quot;Oracle Restricted JRF\u0026quot;, \u0026quot;Oracle Enterprise Manager-Restricted JRF\u0026quot;, \u0026quot;Oracle HTTP Server (Restricted JRF)\u0026quot; ], The file name of this new domain type (without the .json extension) is used with the -domain_type argument on the WDT command line. For example, the command line to create a domain using the HttpServer.json file from the previous steps would look like:\nWLSDEPLOY_HOME/bin/createDomain -oracle_home /etc/oracle ... -domain_type HttpServer Configuring the Model Configuring OHS typically involves adding two top-level folders to the resources section of the model, SystemComponent and OHS. Here is an example:\nresources: SystemComponent: \u0026#39;my-ohs\u0026#39;: ComponentType: \u0026#39;OHS\u0026#39; Machine: \u0026#39;my-machine\u0026#39; OHS: \u0026#39;my-ohs\u0026#39;: AdminHost: \u0026#39;127.0.0.1\u0026#39; AdminPort: \u0026#39;9324\u0026#39; ListenAddress: \u0026#39;127.0.0.1\u0026#39; ListenPort: \u0026#39;7323\u0026#39; SSLListenPort: \u0026#39;4323\u0026#39; ServerName: \u0026#39;http://localhost:7323\u0026#39; Each name under the OHS folder must match a name under the SystemComponent folder in the model, or the name of a SystemComponent element that has been previously created. In this example, the name my-ohs is in both places.\nThe ComponentType field of the SystemComponent element must be set to OHS in order to allow configuration of the corresponding OHS folders.\nYou can use the Model Help Tool to determine the complete list of folders and attributes that can be used in these sections of the model. For example, this command will list the attributes in the OHS folder:\n${WDT_HOME}/bin/modelHelp.sh -oracle_home /tmp/oracle resources:/OHS Targeting Server Groups To create more complex domains with clusters of different types, it is necessary to control the targeting of server groups to managed servers. By default, all server groups in the domain type definition are targeted to all managed servers. To create a SOA domain with SOA and OSB clusters, simply add the OSB template and server group to the SOA domain definition, as shown below.\n{ \u0026#34;name\u0026#34;: \u0026#34;SOA\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SOA type domain definitions\u0026#34;, \u0026#34;versions\u0026#34;: { \u0026#34;12.2.1.3\u0026#34;: \u0026#34;SOA_12213\u0026#34; }, \u0026#34;definitions\u0026#34;: { \u0026#34;SOA_12213\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;Oracle SOA Suite\u0026#34;, \u0026#34;Oracle Service Bus\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34;, \u0026#34;SOA-MGD-SVRS\u0026#34;, \u0026#34;OSB-MGD-SVRS-COMBINED\u0026#34; ], \u0026#34;dynamicClusterServerGroupsToTarget\u0026#34;: [ \u0026#34;SOA-DYN-CLUSTER\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;STB\u0026#34;, \u0026#34;WLS\u0026#34;, \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34;, \u0026#34;UCSUMS\u0026#34;, \u0026#34;SOAINFRA\u0026#34; ] } } } Then, use the ServerGroupTargetingLimits map in the domainInfo section to limit the targeting of the Web Services Manager, SOA, and OSB server groups to the soa_cluster or osb_cluster, as appropriate. In the example below, notice that the JRF-MAN-SVR server group is not listed; therefore, it will use the default targeting and be targeted to all managed servers. The value of each element in this section is a logical list of server and/or cluster names. As shown in the example, the value for each server group can be specified as a list, a comma-separated string, or a single-valued string. There is no semantic difference between listing a cluster\u0026rsquo;s member server names versus using the cluster name; the example uses these simply to show what is possible.\ndomainInfo: AdminUserName: weblogic AdminPassword: welcome1 ServerStartMode: prod ServerGroupTargetingLimits: \u0026#39;WSMPM-MAN-SVR\u0026#39;: soa_cluster \u0026#39;SOA-MGD-SVRS\u0026#39;: \u0026#39;soa_server1,soa_server2\u0026#39; \u0026#39;OSB-MGD-SVRS-COMBINED\u0026#39;: [ osb_server1, osb_server2 ] topology: Name: soa_domain AdminServerName: AdminServer Cluster: soa_cluster: osb_cluster: Server: AdminServer: ListenAddress: myadmin.example.com ListenPort: 7001 Machine: machine1 SSL: Enabled: true ListenPort: 7002 soa_server1: ListenAddress: managed1.example.com ListenPort: 8001 Cluster: soa_cluster Machine: machine2 SSL: Enabled: true ListenPort: 8002 soa_server2: ListenAddress: managed2.example.com ListenPort: 8001 Cluster: soa_cluster Machine: machine3 SSL: Enabled: true ListenPort: 8002 osb_server1: ListenAddress: managed1.example.com ListenPort: 9001 Cluster: osb_cluster Machine: machine2 SSL: Enabled: true ListenPort: 9002 osb_server2: ListenAddress: managed2.example.com ListenPort: 9001 Cluster: osb_cluster Machine: machine3 SSL: Enabled: true ListenPort: 9002 UnixMachine: machine1: NodeManager: ListenAddress: myadmin.example.com ListenPort: 5556 machine2: NodeManager: ListenAddress: managed1.example.com ListenPort: 5556 machine3: NodeManager: ListenAddress: managed2.example.com ListenPort: 5556 SecurityConfiguration: NodeManagerUsername: weblogic NodeManagerPasswordEncrypted: welcome1 Targeting Dynamic Cluster Server Groups Dynamic Cluster Server Groups are server groups that can be targeted to dynamic clusters. Dynamic clusters were added in WebLogic Server version 12.1.2. In WebLogic Server version 12.2.1.1, the ability to target a single dynamic server group to a dynamic cluster was added. In WebLogic Server Version 12.2.1.4, you now have the ability to target multiple dynamic server groups to a dynamic cluster.\nTo enable targeting of dynamic server groups to dynamic clusters, add the dynamicClusterServerGroupsToTarget entry with any dynamic server groups you wish to be targeted to the dynamic clusters in your model or domain. This list must only contain one dynamic server group if you are running a version of WebLogic Server earlier than 12.2.1.4.\n{ \u0026#34;definitions\u0026#34;: { \u0026#34;dynamicClusterServerGroupsToTarget\u0026#34; : [ \u0026#34;WSMPM-DYN-CLUSTER\u0026#34;, \u0026#34;WSM-CACHE-DYN-CLUSTER\u0026#34; ] } } If you wish to specify which dynamic server group to target to a dynamic server, add DynamicClusterServerGroupTargetingLimits to the domainInfo of your model. This entry can coexist with managed servers defined in ServerGroupTargetingLimits.\ndomainInfo: AdminUserName: weblogic AdminPassword: welcome1 ServerStartMode: prod DynamicClusterServerGroupTargetingLimits: \u0026#39;SOA-DYN-CLUSTER\u0026#39;: \u0026#39;soa_dynamic_cluster\u0026#39; "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/samples/",
	"title": "Samples",
	"tags": [],
	"description": "",
	"content": "The samples provide demonstrations of how to accomplish common tasks. These samples are provided for educational and demonstration purposes only; they are not intended to be used in production deployments or to be depended upon to create production environments.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/buildwdt/",
	"title": "Build WebLogic Deploy Tool",
	"tags": [],
	"description": "",
	"content": "Prerequisites You will need the following software installed in your local build environment:\n Oracle WebLogic Server installation version 12.2.1 and later JDK version 8 Maven 3 and later  Specifying the WLST location Execution of the unit tests requires a WebLogic Server installation, because the tests must be run within WLST.\nThe WLST directory can be specified in one of two ways:\n  Specify the -Dunit-test-wlst-dir=\u0026lt;wlst-directory\u0026gt; on the mvn command line.\n  Create a file .mvn/maven.config file in the project directory, containing a single line with the -Dunit-test-wlst-dir=\u0026lt;wlst-directory\u0026gt; value. The .mvn directory contains a maven.config-template file that can be copied and used as a starting point.\n  In these cases, \u0026lt;wlst-directory\u0026gt; refers to the fully-qualified path to the WLST script (wlst.sh or wlst.cmd).\nIf you are using an IDE for development and building, creating a maven-config file will allow some Maven tasks to be performed within the IDE.\nBuild commands If you are making changes to the project, you can build the project using this command line:\nmvn -Dunit-test-wlst-dir=\u0026lt;wlst-directory\u0026gt; clean install\nThis will build the entire project and run the unit tests. Omit the -Dunit-test-wlst-dir= argument if you have created a maven.config file, as described above.\nAnother option for specifying the WLST directory is to set the environment variable WLST_DIR. It is not necessary to use both, and the -D setting will take precedence.\nIf you are not making changes and are only interested in building the latest version, then you can skip the unit tests, using this command line:\nmvn -DskipTests clean install\nThe resulting installer ZIP file built is under the WLSDEPLOY_HOME/installer/target directory.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/discover/",
	"title": "Discover Domain Tool",
	"tags": [],
	"description": "Introspects an existing domain and creates a model file describing the domain and an archive file of the binaries deployed to the domain.",
	"content": "The Discover Domain Tool provides a bootstrapping mechanism to creating a model and archive file by inspecting an existing domain and gathering configuration and binaries from it. Note that the model file produced by the tool is not directly usable by the Create Domain Tool or the Deploy Applications Tool because the Discover Domain Tool does not discover the passwords from the existing domain. Instead, it puts a --FIX ME-- placeholder for passwords it finds. Domain users are also not discoverable so the tool injects the same placeholder value in the AdminUserName and AdminPassword fields in the domainInfo section. The idea of this tool is simply to provide a starting point where the user can edit the generated model and archive file to suit their needs for running one of the other tools.\nTo run the Discover Domain Tool, simply provide the Oracle home and domain location. Provide a location and file name for the model file and archive file where the discovered domain information will be written. The model can be generated in either YAML or JSON format. Simply label the file name with the correct suffix. Both a sh and cmd script are provided.\nExample of basic discoverDomain:\nweblogic-deploy\\bin\\discoverDomain.cmd -oracle_home c:\\wls12213 -domain_home domains\\DemoDomain -archive_file DiscoveredDemoDomain.zip -model_file DiscoveredDemoDomain.yaml  When creating the archive, the tool will try to gather all binaries, scripts, and required directories referenced by the domain configuration with the following caveats.\n Any binaries referenced from the ORACLE_HOME will not be gathered, as they are assumed to exist in any target domain to which model-driven operations will be applied. Doing this is key to allowing the model to be WebLogic Server version independent. In its current form, the Discover Domain Tool will only gather binaries and scripts that are accessible from the local machine. Warnings will be generated for any binaries or scripts that cannot be found but the configuration for those binaries will still be collected, where possible. It is the user\u0026rsquo;s responsibility to add those missing files to the archive in the appropriate locations and edit the the model, as needed, to point to those files inside the archive using the relative path inside the archive (for example, wlsdeploy/applications/myapp.ear). You can you run the discover tool without generating an archive file if you wish to inspect the model file. A create or update domain requires a valid archive file for any binaries, scripts or directories that will be installed into the domain.  You can customize what is generated in the model for password attributes by providing a variable file location and name. This file is a text properties file which will contain a key=value for each password found in the model. The key is a unique token name for a password attribute, and the value is the replacement value; in this case, an empty string. The attribute in the model is injected with the token name and property field notation. For example, @@PROP:AdminUserName@@ or @@PROP:JDBCSystemResource.\u0026lt;Name\u0026gt;.JdbcResource.JDBCDriverParams.PasswordEncrypted@@.\nA command line example containing the variable file name:\nweblogic-deploy\\bin\\discoverDomain.cmd -oracle_home c:\\wls12213 -domain_home domains\\DemoDomain -archive_file DiscoveredDemoDomain.zip -model_file DiscoveredDemoDomain.json -variable_file DiscoverDemoDomain.properties  To discover the domain using online WLST, simply include the admin user name and admin URL on the command line. The tool will prompt for a password to be entered into STDIN.\nAn example of running in online WLST mode:\nweblogic-deploy/bin/discoverDomain.sh -oracle_home /u01/oracle -domain_home /u01/oracle/domains/DemoDomain -archive_file ./DiscoveredDemoDomain.zip -model_file ./DiscoveredDemoDomain.yaml -admin_user weblogic -admin_url t3://localhost:7001  Note that the command must run on the same system where the domain binaries are located in order to successfully gather the corresponding binaries into the archive file.\nWhen a domain is created using custom or product templates, the templates will install resources into the domain that do not need to be discovered for the model or collected into the archive. The domain type argument, which corresponds to a domain typedef file, must describe the type of domain in order for these resources and files to be ignored. By default, discover runs using domain type WLS, which assumes only the WebLogic Server template was applied to the domain. The tool has canned typedefs for two other domain types, RestrictedJRF and JRF. You may use these domain types, or another custom typedef. For more information, refer to Domain Type Definitions.\nAn example of using the domain type argument:\nweblogic-deploy\\bin\\discoverDomain.cmd -oracle_home c:\\wls12213 -domain_home domains\\DemoDomain -archive_file DiscoveredDemoDomain.zip -model_file DiscoveredDemoDomain.yaml -domain_type RestrictedJRF  Before the model is persisted to the model file, any variable injectors or model filters are run, in that order. The final step is validation, which validates the contents of the model, archive and variable file. If the validation is successful, the model is persisted. For more information on these three topics, go to:\n Variable Injection Model Filters Validate Model Tool  The resulting model can also be modified for compatibility with specific target environments, such as Oracle Weblogic Server Kubernetes Operator. For more information, see Target Environments.\nAny problems (or success) will be listed in the discover tool summary. The summary will print the version of the tool and Oracle home, and the WLST mode with which the tool was run (online or offline). A recap of all Warning and Severe messages will be listed, along with a total.\nAn example of a summary with a WARNING message:\nIssue Log for discoverDomain version 1.5.2-SNAPSHOT running WebLogic version 10.3.6.0 offline mode: WARNING Messages: 1. WLSDPLY-06200: Unable to get the Security Realm Provider name in version 10.3.6.0 with offline wlst. The SecurityConfiguration will not be added to the model. The work-around is to manually add the Security Configuration to the model or to discover the domain in online mode : Invalid Security Provider name \u0026quot;Provider\u0026quot; found for provider type at location /SecurityConfiguration/Realm/Adjudicator. Total: WARNING : 1 SEVERE : 0 Environmental Variables The following environment variables may be set.\n JAVA_HOME The location of the JDK. This must be a valid Java 7 or later JDK. WLSDEPLOY_HOME The location of the WebLogic Deploy Tooling installation. By default, the location is calculated from the location of the discoverDomain script. WLSDEPLOY_PROPERTIES System properties that will be passed to WLST.  Opening an Issue against Discover Domain Please provide the STDOUT and STDERR logstreams in the GitHub Issue. If the summary is not listed (unhandled exception stacktrace occurs), be sure and include the Oracle and WDT install versions and whether the tool was run in online or offline WLST mode. If possible, provide the model, variable and archive files and the log file, discoverDomain.log, from location \u0026lt;install home\u0026gt;\\weblogic-deploy\\log.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/concepts/target_env/",
	"title": "Target environments",
	"tags": [],
	"description": "",
	"content": "The Discover Domain and Prepare Model Tools allow you to customize the model and other files produced to be compatible with a specific target environment. Options for a target environment may include:\n Using model tokens for some attributes in the model (see Model Tokens) Using Kubernetes secrets for credentials in the model Applying filters to the model (see Model Filters) Creating additional configuration files for the target system  Specifying a target environment Each tool specifies a target environment using the command-line argument -target \u0026lt;target-name\u0026gt;, where \u0026lt;target-name\u0026gt; refers to a pre-configured target environment, or a user-defined environment. In addition, the -output_dir \u0026lt;output-directory\u0026gt; argument specifies where the files for the target environment will be stored.\nThis command line shows how these arguments can be used with the Discover Domain Tool:\n$WLSDEPLOY_HOME/bin/discoverDomain.sh ... -target k8s -output_dir /etc/files This example would apply the k8s target type to the discovery result, and place those files in /etc/files.\nIf a variable file is specified on the tool\u0026rsquo;s command line using the -variable_file argument, any injected variables will be added to that file. If no variable file is specified, injected variables will be written to the file \u0026lt;output-directory\u0026gt;/\u0026lt;target_name\u0026gt;_variable.properties.\nThe Target Configuration File A target environment is configured in a JSON file at this location:\n$WLSDEPLOY_HOME/lib/target/\u0026lt;target-name\u0026gt;/target.json The \u0026lt;target-name\u0026gt; value corresponds to the value of the -target argument on the tool\u0026rsquo;s command line. The WLS installation includes two pre-defined targets:\n Oracle Weblogic Server Kubernetes Operator (named k8s) Verrazzano (named vz).  You can define a new or extended target environment with a new target-name in the above location, or using a Custom Configuration directory, such as $WDT_CUSTOM_CONFIG/target/\u0026lt;my-target-name\u0026gt;/target.json.\nHere is an example of a target environment file:\n{ \u0026quot;model_filters\u0026quot; : { \u0026quot;discover\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;k8s_prep\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;@@TARGET_CONFIG_DIR@@/k8s_operator_filter.py\u0026quot; } ] }, \u0026quot;variable_injectors\u0026quot; : {\u0026quot;PORT\u0026quot;: {},\u0026quot;HOST\u0026quot;: {},\u0026quot;URL\u0026quot;: {}}, \u0026quot;validation_method\u0026quot; : \u0026quot;lax\u0026quot;, \u0026quot;credentials_method\u0026quot; : \u0026quot;secrets\u0026quot;, \u0026quot;wls_credentials_name\u0026quot; : \u0026quot;__weblogic-credentials__\u0026quot;, \u0026quot;additional_output\u0026quot; : \u0026quot;binding.yaml,model.yaml\u0026quot; } Each of the fields in this example is optional, and can be customized.\nmodel_filters This field specifies the filters to be applied to the resulting model. This follows the same format and rules as the Model Filters configuration. The discover type should always be used here.\nThe @@TARGET_CONFIG_DIR@@ token can be used to indicate that the specified filter is in the same directory as the target configuration file.\nvariable_injectors This field specifies the variable injectors to be applied to the resulting model. This follows the same format and rules as the Variable Injectors configuration.\nvalidation_method This field can be used to set the validation level for the resulting model. Only the value laxis currently supported. With lax validation, variables and Kubernetes secrets referenced in the resulting model do not need to be available when the model is created.\ncredentials_method This field specifies how credentials in the model should be handled. There are two values available:\n secrets - the credentials in the model are replaced with references to Kubernetes secrets, and a UNIX script to create those secrets is produced. config_override_secrets - the credentials in the model are replaced with placeholder values, such as password1, and a UNIX script to create corresponding Kubernetes secrets is produced.  In both these cases, the script to create the Kubernetes secrets is written to \u0026lt;output-directory\u0026gt;/create_k8s_secrets.sh. You will need to update this script with credential values before executing\nwls_credentials_name This field specifies a name for use with the WDT_MODEL_SECRETS_NAME_DIR_PAIRS environment variable to identify administration credential Secrets for the domain. This is useful when those Secrets are stored in a directory that does not follow the \u0026lt;directory\u0026gt;/\u0026lt;name\u0026gt;/\u0026lt;key\u0026gt; convention. For more information about using the WDT_MODEL_SECRETS_NAME_DIR_PAIRS environment variable, see Model Tokens.\nadditional_output This field can be used to create additional output for use in the target environment. The value is a comma-separated list of template files in the $WLSDEPLOY_HOME/lib/target/\u0026lt;target-name\u0026gt; directory. These templates are populated with information derived from the model, and written to a file with the same name in the specified output directory.\nTemplate files can be customized for specific environments. The recommended method is to copy the original template to a custom configuration directory as described above, such as $WDT_CUSTOM_CONFIG/target/\u0026lt;target-name\u0026gt;/model.yaml. The copied file can then be edited as needed, while maintaining the original for reference.\nPre-configured Target Environments These target environment configurations are included in the WebLogic Deploy Tooling installation.\nThe WebLogic Kubernetes Operator target This target environment can be applied by providing the command-line argument -target wko. It will provide this additional processing:\n The wko_operator_filter.py filter will be applied to remove model elements that are not compatible with the Kubernetes environment Variables will be injected into the model for port, host, and URL attributes lax validation will be applied for the resulting model Credentials in the model will be replaced with references to Kubernetes secrets, and a script to create those secrets will be produced An additional Kubernetes resource file, model.yaml, will be produced, with cluster and naming information derived from the model  The Verrazzano Target This target environment can be applied by providing the command-line argument -target vz. It will provide this additional processing:\n The vz_filter.py filter will be applied to remove model elements that are not compatible with the Kubernetes environment Variables will be injected into the model for port, host, and URL attributes lax validation will be applied for the resulting model Credentials in the model will be replaced with placeholder values, and a script to create corresponding secrets will be produced Two additional Kubernetes resource files, model.yaml and binding.yaml, will be produced, with cluster and data source information derived from the model  Generic Kubernetes Target This target environment can be applied by providing the command-line argument -target k8s. It will provide this additional processing:\n The k8s_operator_filter.py filter will be applied to remove model elements that are not compatible with the Kubernetes environment Variables will be injected into the model for port, host, and URL attributes lax validation will be applied for the resulting model Credentials in the model will be replaced with references to Kubernetes secrets, and a script to create those secrets will be produced  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/concepts/tool_configuration/",
	"title": "Tools Configuration",
	"tags": [],
	"description": "",
	"content": "Contents  Tool Property File Model Filters Target Environments Type Definitions Variable Injection Custom Configuration  Tool Property File You can configure or tune WebLogic Deploy Tooling tools using the tool property file. This property file is installed as \u0026lt;weblogic-deploy\u0026gt;/lib/tool.properties. You may change the value of any of the properties in this file to tune the WDT tool. Another option is to configure the tool properties in a Custom Configuration directory. Create the tool.properties file in the $WDT_CUSTOM_CONFIG directory.\nIf a property is removed from the file, or a property value is incorrectly formatted, a WARNING message is logged and an internal default value used instead of the missing or bad value.\n   Property Description     connect.timeout The number of milliseconds that WLST waits for the online connect command to complete. A value of 0 means the operation will not timeout.   activate.timeout The number of milliseconds that WLST waits for the activation of configuration changes to complete. A value of -1 means the operation will not timeout.   deploy.timeout The number of milliseconds that WLST waits for the undeployment process to complete. A value of 0 means the operation will not timeout.   redeploy.timeout The number of milliseconds that WLST waits for the redeployment process to complete. A value of 0 means the operation will not timeout.   start.application.timeout The number of milliseconds that WLST waits for the start application process to complete. A value of 0 means the operation will not timeout.   stop.application.timeout The number of milliseconds that WLST waits for the stop application process to complete. A value of 0 means the operation will not timeout.   set.server.groups.timeout Specifies the amount of time the set server groups connection can be inactive before the connection times out.    Model Filters WebLogic Deploy Tooling supports the use of model filters to manipulate the domain model. The Create Domain, Update Domain, and Deploy Applications Tools apply filters to the model after it is read, before it is validated and applied to the domain. The Discover Domain Tool applies filters to the model after it has been discovered, before the model is validated and written.\nModel filters are written in Jython, and must be compatible with the version used in the corresponding version of WLST. A filter must implement the method filter_model(model), which accepts as a single argument the domain model as a Jython dictionary. This method can make any adjustments to the domain model that are required. Filters can be stored in any directory, as long as they can be accessed by WebLogic Deploy Tooling.\nThe following filter example (fix-password.py) sets the password for two attributes in the SecurityConfiguration WLST folder.\ndef filter_model(model): if model and \u0026#39;topology\u0026#39; in model: if \u0026#39;SecurityConfiguration\u0026#39; in model[\u0026#39;topology\u0026#39;]: model[\u0026#39;topology\u0026#39;][\u0026#39;SecurityConfiguration\u0026#39;][\u0026#39;CredentialEncrypted\u0026#39;] = \u0026#39;welcome1\u0026#39; model[\u0026#39;topology\u0026#39;][\u0026#39;SecurityConfiguration\u0026#39;][\u0026#39;NodeManagerPasswordEncrypted\u0026#39;] = \u0026#39;welcome1\u0026#39; print \u0026#39;Replaced SecurityConfiguration password\u0026#39; else: print \u0026#39;SecurityConfiguration not in the model\u0026#39; Model filters are configured by creating a model_filters.json file in the WLSDEPLOY_HOME/lib directory. This file has separate sections for filters to be applied for specific tools.\nAnother option is to configure model filters in a Custom Configuration directory. Create the model_filters.json file in the $WDT_CUSTOM_CONFIG directory.\nThis example configures two filters for the Create Domain Tool: fix-password.py and no-mail.py, and one filter for the Discover Domain tool.\n{ \u0026#34;create\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;fixPassword\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/home/user/fix-password.py\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;noMail\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/home/user/no-mail.py\u0026#34; } ], \u0026#34;deploy\u0026#34;: [ ], \u0026#34;discover\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;noMail\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/home/user/no-mail.py\u0026#34; } ], \u0026#34;update\u0026#34;: [ ] } Domain Type Definitions WebLogic Deploy Tooling has an extensible domain type system. The three built-in domain types (WLS, RestrictedJRF, and JRF) are defined in JSON files of the same name in the WLSDEPLOY_HOME/lib/typedefs directory. For example, the JRF domain type is defined in the WLSDEPLOY_HOME/lib/typedefs/JRF.json file with similar content, as shown below.\n{ \u0026#34;copyright\u0026#34;: \u0026#34;Copyright (c) 2017, 2020, Oracle Corporation and/or its affiliates.\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;JRF\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;JRF type domain definitions\u0026#34;, \u0026#34;versions\u0026#34;: { \u0026#34;12.1.2\u0026#34;: \u0026#34;JRF_1212\u0026#34;, \u0026#34;12.1.3\u0026#34;: \u0026#34;JRF_1213\u0026#34;, \u0026#34;12.2.1.0\u0026#34;: \u0026#34;JRF_12CR2\u0026#34;, \u0026#34;12.2.1.1\u0026#34;: \u0026#34;JRF_12C_DYN\u0026#34;, \u0026#34;12.2.1.2\u0026#34;: \u0026#34;JRF_12C_DYN\u0026#34;, \u0026#34;12.2.1.3\u0026#34;: \u0026#34;JRF_12C_DYN\u0026#34;, \u0026#34;12.2.1.4\u0026#34;: \u0026#34;JRF_12214\u0026#34; }, \u0026#34;definitions\u0026#34;: { \u0026#34;JRF_1212\u0026#34; : { \u0026#34;baseTemplate\u0026#34;: \u0026#34;@@WL_HOME@@/common/templates/wls/wls.jar\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.jrf_template_12.1.2.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.jrf.ws.async_template_12.1.2.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.wsmpm_template_12.1.2.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/em/common/templates/wls/oracle.em_wls_template_12.1.2.jar\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34; : [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34; ] }, \u0026#34;JRF_1213\u0026#34; : { \u0026#34;baseTemplate\u0026#34;: \u0026#34;@@WL_HOME@@/common/templates/wls/wls.jar\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.jrf_template_12.1.3.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.jrf.ws.async_template_12.1.3.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/oracle_common/common/templates/wls/oracle.wsmpm_template_12.1.3.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/em/common/templates/wls/oracle.em_wls_template_12.1.3.jar\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34; : [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34; ] }, \u0026#34;JRF_12CR2\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;Oracle JRF WebServices Asynchronous services\u0026#34;, \u0026#34;Oracle WSM Policy Manager\u0026#34;, \u0026#34;Oracle Enterprise Manager\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34; ] }, \u0026#34;JRF_12C-DYN\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;Oracle JRF WebServices Asynchronous services\u0026#34;, \u0026#34;Oracle WSM Policy Manager\u0026#34;, \u0026#34;Oracle Enterprise Manager\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34; ], \u0026#34;dynamicClusterServerGroupsToTarget\u0026#34;: [ \u0026#34;WSMPM-DYN-CLUSTER\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;WLS\u0026#34;, \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34; ] }, \u0026#34;JRF_12214\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;Oracle JRF WebServices Asynchronous services\u0026#34;, \u0026#34;Oracle WSM Policy Manager\u0026#34;, \u0026#34;Oracle Enterprise Manager\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34; ], \u0026#34;dynamicClusterServerGroupsToTarget\u0026#34;: [ \u0026#34;WSMPM-DYN-CLUSTER\u0026#34;, \u0026#34;WSM-CACHE-DYN-CLUSTER\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;WLS\u0026#34;, \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34; ] } } } This file tells the Create Domain Tool which templates to use to create the domain, which server groups to target, and even which RCU schemas to create, all based on the installed version of WebLogic Server.\nNew domain types can be defined by creating a new JSON file with the same structure in the WLSDEPLOY_HOME/lib/typedefs directory.\nAnother option is to create this file in the Custom Configuration directory $WDT_CUSTOM_CONFIG/typedefs.\nFor example, to define a SOA domain type for 12.2.1.3, add the typedefs/SOA.json file with similar content, as shown below.\n{ \u0026#34;name\u0026#34;: \u0026#34;SOA\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SOA type domain definitions\u0026#34;, \u0026#34;versions\u0026#34;: { \u0026#34;12.2.1.3\u0026#34;: \u0026#34;SOA_12213\u0026#34; }, \u0026#34;definitions\u0026#34;: { \u0026#34;SOA_12213\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;Oracle SOA Suite\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;JRF-MAN-SVR\u0026#34;, \u0026#34;WSMPM-MAN-SVR\u0026#34;, \u0026#34;SOA-MGD-SVRS\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ \u0026#34;STB\u0026#34;, \u0026#34;WLS\u0026#34;, \u0026#34;MDS\u0026#34;, \u0026#34;IAU\u0026#34;, \u0026#34;IAU_VIEWER\u0026#34;, \u0026#34;IAU_APPEND\u0026#34;, \u0026#34;OPSS\u0026#34;, \u0026#34;UCSUMS\u0026#34;, \u0026#34;SOAINFRA\u0026#34; ] } } } After the new domain typedef file exists, simply specify the new domain type name to the createDomain script, being sure to reference an Oracle Home with the required components installed. For pre-12.2.1 versions, the -wlst_path argument must be used to point to the product home where the appropriate WLST shell script exists; for example, for SOA 12.1.3, add -wlst_path \u0026lt;ORACLE_HOME\u0026gt;/soa so that the tool uses the WLST shell script with the proper environment for SOA domains. In 12.2.1 and later, this is no longer necessary because the WLST shell script in the standard \u0026lt;ORACLE_HOME\u0026gt;oracle_common/common/bin directory will automatically load all components in the Oracle Home. Using the new domain type, simply run the following command to run RCU and create the SOA domain with all of its resources and applications deployed.\n weblogic-deploy\\bin\\createDomain.cmd -oracle_home d:\\SOA12213 -domain_type SOA -domain_parent d:\\demo\\domains -model_file DemoDomain.yaml -archive_file DemoDomain.zip -variable_file DemoDomain.properties -run_rcu -rcu_db mydb.example.com:1539/PDBORCL -rcu_prefix DEMO [-rcu_db_user SYS]  Custom Extension Templates The customExtensionTemplates attribute can be used to specify custom extension templates to be applied to the domain. These should be specified as absolute file paths, and can use tokens.\n{ \u0026#34;name\u0026#34;: \u0026#34;MyCustom\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;My custom type domain definitions\u0026#34;, \u0026#34;versions\u0026#34;: { \u0026#34;12.2.1.3\u0026#34;: \u0026#34;My_12213\u0026#34; }, \u0026#34;definitions\u0026#34;: { \u0026#34;My_12213\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;Basic WebLogic Server Domain\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ ], \u0026#34;customExtensionTemplates\u0026#34;: [ \u0026#34;/user/me/templates/my-template.jar\u0026#34;, \u0026#34;@@ORACLE_HOME@@/user_templates/other-template.jar\u0026#34; ], \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;MY-MAN-SVR\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ ] } } } If there are any server groups in the custom template that should be targeted to managed servers, they should be specified in the serverGroupsToTarget attribute, similar to MY_MAN_SVR in the example above.\nTargeting in Earlier WebLogic Server Versions Templates in WebLogic Server versions prior to 12.2.1 may require the use of the applyJRF WLST command to correctly target resources to the correct clusters and servers. The default behavior for WebLogic Deploy Tooling is to invoke applyJRF only when the extensionTemplates list includes JRF templates.\nA custom type definition file can require applyJRF to be invoked after the templates are added. This is done by setting the targeting attribute to APPLY_JRF, as in this example:\n{ \u0026#34;name\u0026#34;: \u0026#34;MyCustom\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;My custom type domain definitions\u0026#34;, \u0026#34;versions\u0026#34;: { \u0026#34;10.3.6\u0026#34;: \u0026#34;My_11G\u0026#34; }, \u0026#34;definitions\u0026#34;: { \u0026#34;My_11G\u0026#34;: { \u0026#34;baseTemplate\u0026#34;: \u0026#34;@@WL_HOME@@/common/templates/wls/wls.jar\u0026#34;, \u0026#34;extensionTemplates\u0026#34;: [ \u0026#34;/user/me/templates/my-template.jar\u0026#34; ], \u0026#34;targeting\u0026#34;: \u0026#34;APPLY_JRF\u0026#34;, \u0026#34;serverGroupsToTarget\u0026#34;: [ \u0026#34;MY-MAN-SVR\u0026#34; ], \u0026#34;rcuSchemas\u0026#34;: [ ] } } } The targeting attribute is not valid for WebLogic Server versions 12.2.1 and up.\nCustom Configuration WDT allows you to create or extend the pre-installed type definitions, model filters, variable injectors, and target environments. Starting with WDT 1.10.0, these additional configuration files can be stored outside the $WLSDEPLOY_HOME/lib directory. This allows the files to remain in place if the WDT installation is moved or upgraded to a new version.\nTo use a separate configuration directory, set the WDT_CUSTOM_CONFIG environment variable to the directory to be used for configuration. For example:\nexport WDT_CUSTOM_CONFIG=/etc/wdtconfig The customized configuration files should be named and organized the same way they would be under the $WLSDEPLOY_HOME/lib directory. For example:\n/etc/wdtconfig injectors *.json (injector files) typedefs *.json (typedef files) targets my-target target.json *.py (filter files) model_filters.json model_variable_injector.json variable_keywords.json This is a full set of files that can be configured. You will need only to add the files you have created or extended. Details for each configuration type are found at:\n Tool Property File Model Filters Type Definitions (See the example below.) Variable Injection The Prepare Model Tool (target environments)  The WDT tools will look for each configuration file under $WDT_CUSTOM_CONFIG if specified, then under $WLSDEPLOY_HOME/lib.\nExample: Extending a Type Definition To extend the WLS type definition, follow these steps:\n Create a directory to use for custom configurations, such as /etc/wdtconfig. Define the WDT_CUSTOM_CONFIG environment variable to point to that directory. Copy the file $WLSDEPLOY_HOME/lib/typedefs/WLS.json to the $WDT_CUSTOM_CONFIG/typedefs directory and rename it, for example MY_WLS.json. Edit MY_WLS.json with any required changes. Run the tool referencing the name of the new type definition, for example:  createDomain.cmd -oracle_home /wls12213 -domain_type MY_WLS ... "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/developer/",
	"title": "Developer Guide",
	"tags": [],
	"description": "",
	"content": "Developer Guide The Developer Guide provides information for developers who want to understand or contribute to the code.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/encrypt/",
	"title": "Encrypt Model Tool",
	"tags": [],
	"description": "Encrypts the passwords in a model (or its variable file) using a user-provided passphrase.",
	"content": "NOTE: To meet Oracle\u0026rsquo;s security standards, the encryption algorithms require JDK 8 to execute.\nModels contain WebLogic Server domain configuration. Certain types of resources and other configurations require passwords; for example, a JDBC data source requires the password for the user establishing the database connection. When creating or configuring a resource that requires a password, that password must be specified either in the model directly or in the variable file. Clear-text passwords are not conducive to storing configurations as source, so the Encrypt Model Tool gives the model author the ability to encrypt the passwords in the model and variable file using passphrase-based, reversible encryption. When using a tool with a model containing encrypted passwords, the encryption passphrase must be provided, so that the tool can decrypt the password in memory to set the necessary WebLogic Server configuration (which supports its own encryption mechanism based on a domain-specific key). While there is no requirement to use the WebLogic Deploy Tooling encryption mechanism, it is highly recommended because storing clear text passwords on disk is never a good idea.\nThe Create, Update and Deploy tools can take a set of models. The Encrypt model will encrypt a set of models. Each model is encrypted using the same passphrase and written back to its original location.\nNOTE: WebLogic Deploy Tooling also supports the use of domain-encrypted passwords directly in the model. The Encrypt Model Tool should not be used in tandem with this method.\nStart with the following example model:\ndomainInfo: AdminUserName: weblogic AdminPassword: welcome1 ServerStartMode: prod topology: Name: DemoDomain AdminServerName: AdminServer Cluster: mycluster: Server: AdminServer: ListenAddress: 192.168.1.50 ListenPort: 7001 Machine: machine1 m1: ListenAddress: 192.168.1.50 ListenPort: 8001 Cluster: mycluster Machine: machine1 m2: ListenAddress: 192.168.1.51 ListenPort: 8001 Cluster: mycluster Machine: machine2 Machine: machine1: NodeManager: ListenAddress: 192.168.1.50 ListenPort: 5556 machine2: NodeManager: ListenAddress: 192.168.1.51 ListenPort: 5556 SecurityConfiguration: NodeManagerUsername: weblogic NodeManagerPasswordEncrypted: welcome1 RestfulManagementServices: Enabled: true Security: Group: FriscoGroup: Description: The WLS Deploy development group User: Robert: Password: welcome1 GroupMemberOf: [ Administrators, FriscoGroup ] Derek: Password: welcome1 GroupMemberOf: \u0026#39;Administrators, FriscoGroup\u0026#39; Richard: Password: welcome1 GroupMemberOf: [ FriscoGroup ] Carolyn: Password: welcome1 GroupMemberOf: FriscoGroup Mike: Password: welcome1 GroupMemberOf: FriscoGroup Johnny: Password: welcome1 GroupMemberOf: FriscoGroup Gopi: Password: welcome1 GroupMemberOf: FriscoGroup To run the encryption tool on the model, run the following command:\nweblogic-deploy\\bin\\encryptModel.cmd -oracle_home c:\\wls12213 -model_file UnencryptedDemoDomain.yaml  The tool will prompt for the encryption passphrase twice and then encrypt any passwords it finds in the model, skipping any password fields that have variable values, to produce a result that looks like the following model.\ndomainInfo: AdminUserName: weblogic AdminPassword: \u0026#39;{AES}a0dacEQ4Q2JnTmI4VHp5NjIzVHNPRFg5ZjRiVDJ4NzU6T1M0SGYwM2xBeHdRdHFWVTpWZEh6bkd4NzZSQT0=\u0026#39; ServerStartMode: prod topology: Name: DemoDomain AdminServerName: AdminServer Cluster: mycluster: Server: AdminServer: ListenAddress: 192.168.1.50 ListenPort: 7001 Machine: machine1 m1: ListenAddress: 192.168.1.50 ListenPort: 8001 Cluster: mycluster Machine: machine1 m2: ListenAddress: 192.168.1.51 ListenPort: 8001 Cluster: mycluster Machine: machine2 Machine: machine1: NodeManager: ListenAddress: 192.168.1.50 ListenPort: 5556 machine2: NodeManager: ListenAddress: 192.168.1.51 ListenPort: 5556 SecurityConfiguration: NodeManagerUsername: weblogic NodeManagerPasswordEncrypted: \u0026#39;{AES}WndJQWNySWpoY0VEbFpmR2V1RFhvamVFdGwzandtaFU6L1d4V0dPRFpsaXJIUkl2djpQdUdLaTloR1IxTT0=\u0026#39; RestfulManagementServices: Enabled: true Security: Group: FriscoGroup: Description: The WebLogic Deploy development group User: Robert: Password: \u0026#39;{AES}VFIzVmdwcWNLeHBPaWhyRy82VER6WFV6aHRPbGcwMjQ6bS90OGVSTnJxWTIvZjkrRjpjSzBQUHlOWWpWTT0=\u0026#39; GroupMemberOf: [ Administrators, FriscoGroup ] Derek: Password: \u0026#39;{AES}R1BTM21ZSkxpdTNIZjNqcTlsSC9PeHV4aXJoT3kxazM6M1dLOXBLeCtlc1lsVDUrWjo5VitHZUxCcjZnOD0=\u0026#39; GroupMemberOf: \u0026#39;Administrators, FriscoGroup\u0026#39; Richard: Password: \u0026#39;{AES}Y3FkQmRIRGhjZEtlRjVkVVdLQU1Eb09LWDIzMlhUWVo6MjllVExsMmNmNzJzZDFjaTpNcVNDbUs2cnRFRT0=\u0026#39; GroupMemberOf: [ FriscoGroup ] Carolyn: Password: \u0026#39;{AES}cW8wczJqZXJZOHVsTGNOTmlqTGpuZGFoSkY2ME5WbTk6c0VaWGs1ME5pemlKdC9wajpFaTJPRS9ZQlcvND0=\u0026#39; GroupMemberOf: FriscoGroup Mike: Password: \u0026#39;{AES}cnF6Z3JOVWcvc0czN3JVb1g5T2FidmRsSU51anJCa0Y6UlBsNVFsOFlXU29xUlY1aDp3VWZWYU5VOVRkMD0=\u0026#39; GroupMemberOf: FriscoGroup Johnny: Password: \u0026#39;{AES}UWJ5Y25Ma2RHTkNMVTZ1RnlhRkNaTUxXaXV4SjBjaWg6citwTDQvelN1aUlPdnZaSDpCMEdSWGg2ZlVJUT0=\u0026#39; GroupMemberOf: FriscoGroup Gopi: Password: \u0026#39;{AES}MWJGcnhtZlNyWXVrU1VXMVFxZFEvQThoS1hPN2FQdDc6MmRPaUF2Y1FCQ3VIK3MydDpZaFR5clBrN1FjOD0=\u0026#39; GroupMemberOf: FriscoGroup If the model stores passwords in the variables file, like the following model:\nresources: JDBCSystemResource: Generic1: Target: mycluster JdbcResource: JDBCDataSourceParams: JNDIName: [ jdbc/generic1 ] GlobalTransactionsProtocol: TwoPhaseCommit JDBCDriverParams: DriverName: oracle.jdbc.xa.client.OracleXADataSource URL: \u0026#39;jdbc:oracle:thin:@//@@PROP:db.url@@\u0026#39; PasswordEncrypted: \u0026#39;@@PROP:db.password@@\u0026#39; Properties: user: Value: \u0026#39;@@PROP:db.user@@\u0026#39; oracle.net.CONNECT_TIMEOUT: Value: 5000 oracle.jdbc.ReadTimeout: Value: 30000 JDBCConnectionPoolParams: InitialCapacity: 3 MaxCapacity: 15 TestTableName: SQL ISVALID TestConnectionsOnReserve: true MailSession: MyMailSession: JNDIName: mail/MyMailSession Target: mycluster SessionUsername: \u0026#39;john.smith@example.com\u0026#39; SessionPasswordEncrypted: \u0026#39;@@PROP:mymailsession.password@@\u0026#39; Properties: mail.store.protocol: imap mail.imap.port: 993 mail.imap.ssl.enable: true mail.imap.starttls.enable: true mail.imap.host: imap.example.com mail.impa.auth: true mail.transport.protocol: smtp mail.smtp.starttls.enable: true mail.smtp.port: 465 mail.smtp.ssl.enable: true mail.smtp.auth: true mail.smtp.host: smtp.example.com Run the encryption tool and pass both the model and variable files, like this:\nweblogic-deploy\\bin\\encryptModel.cmd -oracle_home c:\\wls12213 -model_file UnencryptedDemoDomain.yaml -variable_file UnencryptedDemoDomain.properties  The variable file will now look something like the following:\n#Variables updated after encryption #Thu Feb 01 19:12:57 CST 2018 db.user=rpatrick db.url=mydb.example.com:1539/PDBORCL db.password={AES}czFXMkNFWNG9jNTNYd0hRL2R1anBnb0hDUlp4K1liQWFBdVM4UTlvMnE0NU1aMUZ5UVhiK25oaWFBc2lIQ20\\= mymailsession.password={AES}RW9nRnUzcE41WGNMdnEzNDdRQVVNWm1LMGhidkFBVXg6OUN3aXcyci82cmh3cnpNQTpmY2UycUp5YWl4UT0\\=  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/validate/",
	"title": "Validate Model Tool",
	"tags": [],
	"description": "Provides both standalone validation of a model as well as model usage information to help users write or edit their models.",
	"content": "When working with a metadata model that drives tooling, it is critical to make it easy both to validate that the model and its related artifacts are well-formed and to provide help on the valid attributes and subfolders for a particular model location. The Validate Model Tool provides both validation and help for model authors as a standalone tool. In addition, the tool is integrated with the createDomain and deployApps tools to catch validation errors early, before any actions are performed on the domain.\nTo use the Validate Model Tool, simply run the validateModel shell script with the correct arguments. To see the list of valid arguments for any tool in the WebLogic Deploy Tooling installation, simply run the shell script with the -help option (or with no arguments) to see the shell script usage information.\nFor example, starting with the following model shown below, where the AdminServer attribute Machine is misspelled as Machines:\ntopology: Name: DemoDomain AdminServerName: AdminServer Cluster: mycluster: Server: AdminServer: ListenAddress: 192.168.1.50 ListenPort: 7001 Machines: machine1 SSL: Enabled: true ListenPort: 7002 ServerStart: ClassPath: \u0026#39;c:\\foo\\bar\u0026#39; m1: ListenAddress: 192.168.1.50 ListenPort: 8001 Cluster: mycluster Machine: machine1 ServerStart: ClassPath: \u0026#39;c:\\foo\\bar\u0026#39; m2: ListenAddress: 192.168.1.51 ListenPort: 8001 Cluster: mycluster Machine: machine2 ServerStart: ClassPath: \u0026#39;c:\\foo\\bar\u0026#39; Machine: machine1: NodeManager: ListenAddress: 192.168.1.50 ListenPort: 5556 machine2: NodeManager: ListenAddress: 192.168.1.51 ListenPort: 5556 To validate the standalone model file, run the tool as follows:\nweblogic-deploy\\bin\\validateModel.cmd -oracle_home c:\\wls12213 -model_file InvalidDemoDomain.yaml  The output of the tool will look something like this:\n----------------------------------------------- Validation Area: topology Section ----------------------------------------------- Errors: 1 Message: Machines is not one of the folder, folder instance or attribute names allowed in model location topology:/Server/AdminServer  Use the Model Help Tool to determine the valid list of attributes and folders at this model location.\nIf the model contains variable definitions and the variable file is specified, the Validate Model Tool will validate that all variable references in the model are defined in the variable file. For example, invoking the tool as shown here:\nweblogic-deploy\\bin\\validateModel.cmd -oracle_home c:\\wls12213 -model_file InvalidDemoDomain.yaml -variable_file InvalidDemoDomain.properties  Results in output similar to that shown below, if the db.password variable is not defined in the variable file.\n----------------------------------------------- Validation Area: Variable Substitutions ----------------------------------------------- Errors: 2 Message: Model location resource:/JDBCSystemResource/Generic1/JdbcResource/JDBCDriverParams/PasswordEncrypted references variable db.password that is not defined in D:/demo/InvalidDemoDomain.properties Message: Model location resource:/JDBCSystemResource/Generic2/JdbcResource/JDBCDriverParams/PasswordEncrypted references variable db.password that is not defined in D:/demo/InvalidDemoDomain.properties  If the model references binaries that should be present in the archive, the Validate Model Tool will validate that all binary references in the model that point to archive file locations are present in the archive file. For example, invoking the tool as shown here:\nweblogic-deploy\\bin\\validateModel.cmd -oracle_home c:\\wls12213 -model_file InvalidDemoDomain.yaml -archive_file InvalidDemoDomain.zip  Results in output similar to that shown below, if the simpleear.ear file is not in the model-specified location inside the archive file.\n----------------------------------------------- Validation Area: Archive Entries ----------------------------------------------- Errors: 1 Message: Model location appDeployments:/Application/simpleear/SourcePath references file wlsdeploy/applications/simpleear.ear that is not found in the archive file D:/demo/InvalidDemoDomain.zip  Using Multiple Models The Validate Model Tool supports the use of multiple models, as described in Using Multiple Models.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/compare/",
	"title": "Compare Model Tool",
	"tags": [],
	"description": "Compares two model files.",
	"content": "When working with a domain model, sometimes it is useful to know the differences between different models. The Compare Model Tool compares two model files and generates a model that shows the differences between them.\nTo use the Compare Model Tool, simply run the compareModel shell script with the correct arguments. To see the list of valid arguments, simply run the shell script with the -help option (or with no arguments) for usage information.\nFor example, comparing the following models.\nNew Model\ndomainInfo: AdminUserName: \u0026#39;weblogic\u0026#39; AdminPassword: \u0026#39;welcome2\u0026#39; ServerStartMode: \u0026#39;prod\u0026#39; topology: Name: domain1 AdminServerName: \u0026#34;admin-server\u0026#34; SecurityConfiguration: NodeManagerUsername : \u0026#39;weblogic\u0026#39; NodeManagerPasswordEncrypted : \u0026#39;welcome1\u0026#39; Cluster: \u0026#34;cluster-1\u0026#34;: DynamicServers: ServerTemplate: \u0026#34;cluster-1-template\u0026#34; ServerNamePrefix: \u0026#34;managed-server\u0026#34; DynamicClusterSize: 5 MaxDynamicClusterSize: 5 CalculatedListenPorts: false \u0026#34;cluster-2\u0026#34;: DynamicServers: ServerTemplate: \u0026#34;cluster-2-template\u0026#34; ServerNamePrefix: \u0026#34;managed-server\u0026#34; DynamicClusterSize: 2 MaxDynamicClusterSize: 3 CalculatedListenPorts: false Server: \u0026#34;admin-server\u0026#34;: ListenPort: 10011 ServerTemplate: \u0026#34;cluster-1-template\u0026#34;: Cluster: \u0026#34;cluster-1\u0026#34; ListenPort : \u0026#39;5001\u0026#39; JTAMigratableTarget: StrictOwnershipCheck: true Cluster: \u0026#34;cluster-1\u0026#34; \u0026#34;cluster-2-template\u0026#34;: Cluster: \u0026#34;cluster-2\u0026#34; ListenPort : \u0026#39;8001\u0026#39; ServerStart: Arguments: [\u0026#39;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=6006\u0026#39;] JTAMigratableTarget: StrictOwnershipCheck: true Cluster: \u0026#34;cluster-2\u0026#34; appDeployments: Application: myear: SourcePath: /home/johnny/dimtemp23/sample_app_stage/wlsdeploy/applications/sample_app.ear Target: [\u0026#39;cluster-2\u0026#39;,\u0026#39;cluster-1\u0026#39;] yourear: SourcePath: /home/johnny/dimtemp23/sample_app_stage/wlsdeploy/applications/sample_app2.ear ModuleType: ear Target: [\u0026#39;cluster-2\u0026#39;,\u0026#39;cluster-1\u0026#39;] resources: JMSServer: JMSServer1: Target: m1 JMSServer2: Target: m2 JMSSystemResource: MyJmsModule: Target: mycluster SubDeployment: JMSServer1Subdeployment: Target: JMSServer1 JMSServer2Subdeployment: Target: JMSServer2 JmsResource: ConnectionFactory: WebAppConnectionFactory: DefaultTargetingEnabled: true JNDIName: jms/WebCF ClientParams: AllowCloseInOnMessage: true MessagesMaximum: 1 DefaultDeliveryParams: DefaultTimeToDeliver: 3 DefaultTimeToLive: 3600 FlowControlParams: FlowControlEnabled: false LoadBalancingParams: LoadBalancingEnabled: false SecurityParams: AttachJMSXUserId: true TransactionParams: XAConnectionFactoryEnabled: true UniformDistributedQueue: MyUniformDistributedQueue: DefaultTargetingEnabled: true JNDIName: jms/myUDQ Old Model\ndomainInfo: AdminUserName: \u0026#39;weblogic\u0026#39; AdminPassword: \u0026#39;welcome2\u0026#39; ServerStartMode: \u0026#39;prod\u0026#39; topology: Name: domain1 AdminServerName: \u0026#34;admin-server\u0026#34; SecurityConfiguration: NodeManagerUsername : \u0026#39;weblogic\u0026#39; NodeManagerPasswordEncrypted : \u0026#39;welcome1\u0026#39; Cluster: \u0026#34;cluster-1\u0026#34;: DynamicServers: ServerTemplate: \u0026#34;cluster-1-template\u0026#34; ServerNamePrefix: \u0026#34;managed-server\u0026#34; DynamicClusterSize: 5 MaxDynamicClusterSize: 5 CalculatedListenPorts: false Server: \u0026#34;admin-server\u0026#34;: ListenPort: 10011 ServerTemplate: \u0026#34;cluster-1-template\u0026#34;: Cluster: \u0026#34;cluster-1\u0026#34; ListenPort : \u0026#39;5001\u0026#39; ServerStart: Arguments: [\u0026#39;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=6006\u0026#39;] JTAMigratableTarget: StrictOwnershipCheck: true Cluster: \u0026#34;cluster-1\u0026#34; appDeployments: Application: myear: SourcePath: /home/johnny/dimtemp23/sample_app_stage/wlsdeploy/applications/sample_app.ear ModuleType: ear Target: [\u0026#39;cluster-1\u0026#39;,\u0026#39;cluster-2\u0026#39;] myear2: SourcePath: /home/johnny/dimtemp23/sample_app_stage/wlsdeploy/applications/sample_app2.ear ModuleType: ear Target: [\u0026#39;cluster-1\u0026#39;,\u0026#39;cluster-2\u0026#39;] resources: WebAppContainer: WAPEnabled: \u0026#39;@@PROP:WAPENABLED@@\u0026#39; FilterDispatchedRequestsEnabled: true AllowAllRoles: true XPoweredByHeaderLevel: NONE ServletAuthenticationFormURL: true ServletReloadCheckSecs: 1 ChangeSessionIDOnAuthentication: true MimeMappingFile: wlsdeploy/config/amimemappings.properties AuthCookieEnabled: true WorkContextPropagationEnabled: true ReloginEnabled: true GzipCompression: GzipCompressionContentType: [ text/html, text/xml, text/plain ] GzipCompressionEnabled: true JMSServer: JMSServer1: Target: m1 JMSServer2: Target: m2 JMSSystemResource: MyJmsModule: Target: mycluster SubDeployment: JMSServer1Subdeployment: Target: JMSServer1 JMSServer2Subdeployment: Target: JMSServer2 JmsResource: ConnectionFactory: WebAppConnectionFactory: DefaultTargetingEnabled: true JNDIName: jms/WebCF ClientParams: AllowCloseInOnMessage: true MessagesMaximum: 1 DefaultDeliveryParams: DefaultTimeToDeliver: 3 DefaultTimeToLive: 3600 FlowControlParams: FlowControlEnabled: false LoadBalancingParams: LoadBalancingEnabled: false SecurityParams: AttachJMSXUserId: true TransactionParams: XAConnectionFactoryEnabled: true MDBConnectionFactory: DefaultTargetingEnabled: true JNDIName: jms/mdbCF TransactionParams: XAConnectionFactoryEnabled: true UniformDistributedQueue: MyUniformDistributedQueue: DefaultTargetingEnabled: true JNDIName: jms/myUDQ ResetDeliveryCountOnForward: true To compare the two model files, run the tool as follows:\nweblogic-deploy\\bin\\compareModel.cmd -oracle_home c:\\wls12213 new_model.yaml old_model.yaml  The output of the tool will look something like this:\nComparing Models: new=/tmp/model2.yaml vs old=/tmp/model1.yaml Differences between new model and old model: resources: JMSSystemResource: MyJmsModule: JmsResource: ConnectionFactory: '!MDBConnectionFactory': '!WebAppContainer': appDeployments: Application: '!myear2': yourear: SourcePath: /home/johnny/dimtemp23/sample_app_stage/wlsdeploy/applications/sample_app2.ear ModuleType: ear Target: [ 'cluster-2', 'cluster-1' ] myear: Target: [ 'cluster-2', 'cluster-1' ] topology: ServerTemplate: 'cluster-1-template': '!ServerStart': 'cluster-2-template': Cluster: 'cluster-2' ListenPort: 8001 ServerStart: Arguments: [ '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=6006' ] JTAMigratableTarget: StrictOwnershipCheck: True Cluster: 'cluster-2' Cluster: 'cluster-2': DynamicServers: ServerTemplate: 'cluster-2-template' ServerNamePrefix: 'managed-server' DynamicClusterSize: 2 MaxDynamicClusterSize: 3 CalculatedListenPorts: False 1. Model Path: resources--\u0026gt;JMSSystemResource--\u0026gt;MyJmsModule--\u0026gt;JmsResource--\u0026gt;UniformDistributedQueue--\u0026gt;MyUniformDistributedQueue--\u0026gt;ResetDeliveryCountOnForward does not exist in new model but exists in previous model 2. Model Path: appDeployments--\u0026gt;Application--\u0026gt;myear--\u0026gt;ModuleType does not exist in new model but exists in previous model Comparing the new and old models:\n Added cluster-2 and cluster-2-template in the topology section. Removed ServerStart of cluster-1-template in the topology section. Deployed two applications yourear and myear in the appDeployments section. Removed application myear in the appDeployments section. Removed MDBConnectionFactory from the MyJmsModule JMS Module in the resource section. Removed WebAppContainer in the resource section. Removed the attribute ResetDeliveryCountOnForward from MyUniformDistributedQueue. Changed deployment targets for application myear. Removed the attribute \u0026lsquo;ModuleType\u0026rsquo; for application myear.  Note: The ! is a notation for the deletion of a non-attribute key element from the model. Missing attributes will be omitted from the resulting model, but shown as messages in the output. If the attribute value is a list, even if all the individual items within the list are identical but the ordering is different, the attribute is counted as different.\nTo compare the two model files and generate the output to files, run the tool as follows:\nweblogic-deploy\\bin\\compareModel.cmd -oracle_home c:\\wls12213 -output_dir c:\\cm-output ew_model.yaml old_model.yaml The following files will be written to the directory: diffed_model.json diffed_model.yaml compare_model_stdout  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/prepare/",
	"title": "Prepare Model Tool",
	"tags": [],
	"description": "Prepares model files for deploying to WebLogic Kubernetes Operator environment.",
	"content": "The Prepare Model Tool prepares WDT model files for deploying to specific target environments. These customizations include:\n Removing sections from the model that are not compatible with the environment Replacing credential and attribute values with WDT macros Generating a UNIX shell script that will help with creating any required Kubernetes secrets Generating a variable properties file to customize attribute values Generating any additional configuration files to configure the target environment Updating the model file(s)  To use the Prepare Model Tool, simply run the prepareModel shell script with the correct arguments. To see the list of valid arguments, simply run the shell script with the -help option (or with no arguments) for usage information.\nFor example, to prepare model files for use with Oracle Weblogic Server Kubernetes Operator, run the tool with -target wko as follows:\n$WLSDEPLOY_HOME/bin/prepareModel.sh -oracle_home /u01/wls12213 -model_file model1.yaml, model2.yaml -target wko -output_dir $HOME/wko-output In the output directory, you will find:\nmodel.yaml model1.yaml model2.yaml create_k8s_secrets.sh wko_variable.properties You can then customize the wko_variable.properties and create_k8s_secrets.sh to provide environment-specific values.\nFor more information about additional target environments and options, see Target Environments.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/kubernetes/",
	"title": "Extract Domain Resource Tool",
	"tags": [],
	"description": "Generates a domain resource YAML for use with the WebLogic Kubernetes Operator.",
	"content": "Using WDT with WebLogic Kubernetes Operator The Extract Domain Resource Tool can be used to create a domain resource file for use with the WebLogic Kubernetes Operator. This allows the domain configuration and the Kubernetes container configuration to be specified in a single model file.\nThis is especially useful when making configuration changes to the domain that also need to be reflected in the domain resource file. For example, adding a cluster to the domain only requires that it be added to the topology section of the WDT model, then a new domain resource file can be generated to apply to Kubernetes.\nMore information about the WebLogic Kubernetes Operator can be found here.\nNOTE: The Extract Domain Resource Tool is available with WDT releases 1.7.0 and later.\nHere is an example command line for the Extract Domain Resource Tool:\n\u0026lt;wls-deploy-home\u0026gt;/bin/extractDomainResource.sh -oracle_home /tmp/oracle -domain_home /u01/mydomain -model_file /tmp/mymodel.yaml -variable_file /tmp/my.properties -domain_resource_file /tmp/operator/domain-resource.yaml For the simplest case, the Extract Domain Resource Tool will create a sparse domain file. This is what is generated when there is not a kubernetes section in the model, or that section is empty.\napiVersion: weblogic.oracle/v8 kind: Domain metadata: name: DemoDomain spec: domainHome: /u01/mydomain image: \u0026#39;--FIX ME--\u0026#39; imagePullSecrets: - name: \u0026#39;--FIX ME--\u0026#39; webLogicCredentialsSecret: \u0026#39;--FIX ME--\u0026#39; configuration: model: domainType: WLS clusters: - clusterName: mycluster replicas: 2 - clusterName: mycluster3 replicas: 4 In this example, the value for domainHome was set as an input parameter to the extractDomainResource script from the command line. The kind and name were set to the domain name derived from the topology section of the model, or the default base_domain. The cluster entries are pulled from the topology section of the model, and their replica counts were derived from the number of servers for each cluster.\nThe user is expected to fill in the image and secrets information identified by --FIX ME-- in the domain resource output.\nFor more advanced configurations, including pre-populating the --FIX ME-- values, the user can populate the kubernetes section of the WDT model, and those values will appear in the resulting domain resources file. This model section overrides and adds some values to the result.\nkubernetes: metadata: name: myName namespace: myNamespace spec: image: \u0026#39;my.repo/my-image:2.0\u0026#39; imagePullSecrets: WEBLOGIC_IMAGE_PULL_SECRET_NAME: webLogicCredentialsSecret: name: \u0026#39;@@PROP:mySecret@@\u0026#39; configuration: model: domainType: \u0026#39;WLS\u0026#39; secrets: [ \u0026#39;secret1\u0026#39;, \u0026#39;secret2\u0026#39; ] serverPod: env: USER_MEM_ARGS: value: \u0026#39;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom\u0026#39; JAVA_OPTIONS: value: \u0026#39;-Dmydir=/home/me\u0026#39; This example uses @@PROP:mySecret@@ to pull the value for webLogicCredentialsSecret from the variables file specified on the command line. This can be done with any of the values in the kubernetes section of the model. More details about using model variables can be found here.\nFor this example, the resulting domain resource file would contain:\napiVersion: weblogic.oracle/v8 kind: Domain metadata: name: myName namespace: myNamespace spec: image: \u0026#39;my.repo/my-image:2.0\u0026#39; imagePullSecrets: - name: WEBLOGIC_IMAGE_PULL_SECRET_NAME webLogicCredentialsSecret: name: WEBLOGIC_CREDENTIALS_SECRET_NAME serverPod: env: - name: USER_MEM_ARGS value: \u0026#39;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom\u0026#39; - name: JAVA_OPTIONS value: \u0026#39;-Dmydir=/home/me\u0026#39; domainHome: /u01/mine/domain configuration: model: domainType: WLS secrets: - secret1 - secret2 clusters: - clusterName: mycluster replicas: 2 - clusterName: mycluster3 replicas: 4 The syntax of the spec/serverPod/env and other list sections in the WDT model are different from the syntax in the target file. The WDT tools do not recognize the hyphenated list syntax, so these elements are specified in a similar manner to other model lists.\nIf clusters are specified in the kubernetes/spec section of the model, those clusters will be configured in the domain resource file, and clusters from the topology section will be disregarded.\nIf the WDT model has a value of Never for spec/imagePullPolicy, the imagePullSecrets default value will not be added.\nA full list of sections and variables supported by the WebLogic Kubernetes Operator is available here.\nThe Extract Domain Resource Tool supports a subset of these sections, including metadata, serverPod, and spec.\nThe Model Help Tool can be used to determine the folders and attributes that can be used in the kubernetes section of the model. For example, this command will list the folders and attributes in the spec folder:\n\u0026lt;wls-deploy-home\u0026gt;/bin/modelHelp.sh -oracle_home /tmp/oracle kubernetes:/spec The content in the kubernetes section is not generated when a model is discovered by the Discover Domain Tool.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/variable_injection/",
	"title": "Variable Injector Tool",
	"tags": [],
	"description": "Adds token to a model with variables.",
	"content": "The Variable Injector Tool is used to tokenize a model with variables. The values for these variables are assigned using an external property file. This facilitates using the same domain model to create new domains in different environments. The Variable Injector Tool can be run as an option in the Discover Domain Tool, or from the standalone command-line interface.\nTo enable the Variable Injector Tool during the Discover Domain Tool run, create a variable injector configuration by placing a JSON file named model_variable_injector.json into the \u0026lt;WLSDEPLOY\u0026gt;/lib directory using one or more of the pre-defined keywords and/or a CUSTOM list of files.\nAnother option is to configure variable injection in a Custom Configuration directory. Create the model_variable_injector.json file in the $WDT_CUSTOM_CONFIG directory.\nA keyword points to an injector directive file. The tool applies the directives to the attributes in a model, and if the directive matches an attribute, then a property token with a unique variable name is injected into the model and replaces the attribute value. The variable name and model attribute value are placed into the external variable properties file.\nNOTE: Variable injection on an attribute is only performed once. The property token is not replaced by any subsequent matches.\nIf variable injection is enabled, the Discover Domain Tool calls the variable injector after the model has been discovered and after all filters run, but before model validation.\nThe supported keywords are as follows:\n  CREDENTIALS - All MBean credentials attribute values (user and password) are injected with a variable.\n  HOST - All MBean host attribute values in the model are injected with a variable.\n  PORT - All MBean port attribute values in the model are injected with a variable.\n  TARGET - All MBean target attribute values in the model are injected with a variable.\n  TOPOLOGY - Common environmental MBean attributes found in the topology section of the model are injected with a variable. This includes server, machine and Node Manager ports, credentials and listen addresses, and cluster messaging modes, addresses and ports.\n  URL - All MBean URL attribute values in the model are injected with a variable.\n  NOTE: The directives used by each pre-defined keyword are defined in an injector JSON file that is located in the \u0026lt;WLSDEPLOY\u0026gt;/lib/injectors folder. These files should not be changed, but could be used as is.\nHere is an example of a model_variable_injector.json file using the PORT keyword.\n{ \u0026#34;PORT\u0026#34;: {} } Below is a model snippet that shows injected variables in the port attributes.\ntopology: Name: soa_domain AdminServerName: AdminServer Cluster: soa_cluster: osb_cluster: Server: AdminServer: ListenAddress: myadmin.example.com ListenPort: @@PROP:Server.AdminServer.ListenPort@@ Machine: machine1 SSL: Enabled: true ListenPort: @@PROP:Server.SSL.AdminServer.ListenPort@@ soa_server1: ListenAddress: managed1.example.com ListenPort: @@PROP:Server.soa_server1.ListenPort@@ Cluster: soa_cluster Machine: machine2 SSL: Enabled: true ListenPort: @@PROP:Server.SSL.soa_server1.ListenPort@@ soa_server2: ListenAddress: managed2.example.com ListenPort: @@PROP:Server.soa_server2.ListenPort@@ Cluster: soa_cluster Machine: machine3 SSL: Enabled: true ListenPort: @@PROP:Server.SSL.soa_server2.ListenPort@@ And the resulting variable property file:\nServer.AdminServer.ListenPort=7001 Server.AdminServer.SSL.ListenPort=7002 Server.soa_server1.ListenPort=8001 Server.soa_server1.SSL.ListenPort=8002 Server.soa_server2.ListenPort=8001 Server.soa_server2.SSL.ListenPort=8002 To specify the name and location of the variable properties file for the Discover Domain Tool, use the argument -variable_properties_file on the command line. Usage of the variable_properties_file argument without the presence of the model variable injector file in the \u0026lt;WLSDEPLOY\u0026gt;/lib directory will cause an error condition and the tool will exit. If the model variable injector file exists in the directory, but the command-line argument is not used, the variable properties file is created with the following defaults:\n If the model_file command-line argument is used on the Discover Domain Tool run, the properties file name and location will be the same as the model file, with the file extension .properties. If only the archive file argument is present, the archive file name and location will be used.  As with the archive and model file, each run of the Discover Domain Tool will overwrite the contents of an existing variable property file with the values from the current run.\nCustom Variable Injector To designate custom injector directives, use the CUSTOM keyword in the model_variable_injector.json file. The CUSTOM keyword requires a list of one or more custom injector directive JSON files.\nAn injector directive contains a key that identifies an attribute to be tokenized, and an optional set of directive properties. The key is a period-separated MBean hierarchy and attribute name as they are defined in the model. Always exclude the name of the model section from the injector key.\nFor example, an injector key for the Server SSL Listen Port is as below. This directive contains no additional properties.\n{ \u0026#34;Server.SSL.ListenPort\u0026#34;: {} } NOTE: The hierarchy of MBeans in the model for the ListenPort attribute. Note that the MBean name of AdminServer is NOT included in the directive:\ntopology: Server: AdminServer: ListenAddress: myadmin.example.com ListenPort: 7001 Machine: machine1 SSL: Enabled: true ListenPort: 7002 These custom injector JSON files will be processed by the Variable Injector Tool before keywords, each file processed in list order. A property injected into an attribute will not be replaced by any subsequent matches.\nCustom directive properties Include the following properties to refine the directive as specified.\n  force:\u0026lt;attribute\u0026gt; If the MBean hierarchy exists in the model, but the attribute does not, then the attribute will be added and persisted to the discovered model. The value stored in the model is the WebLogic default value.\n  variable_value: Replace the model value with the specified value in the variable properties. This may be used in conjunction with the force directive, replacing the default value with the indicated value.\n  regexp: A list of regexp patterns that will be applied to either the string values or map values of an attribute in the model. If the pattern matches, then the matching part of the string or dictionary will be injected with a property token and a unique variable name.\n  pattern: The regular expression pattern to apply to the string value or map values of an attribute.\n  suffix: The suffix name to append to each resulting variable name in order to create a unique variable name.\n    The regexp list is useful when only a segment of a string value or map needs to be tokenized (giving you a clean list of property values in the variable properties file). You can inject more than one token into a string or map with multiple patterns. However, when you have more than one pattern, you must provide a suffix for each. This allows the tool to generate a unique variable name for each token in the string or map.\nThe following is an example of how to effectively use the regexp directive list to search for a segment in a string value. In this example, we want to search for the host and port in each Oracle JDBC URL that uses the special Oracle URL notation, and create an entry for the host and port in the variable properties file.\nIn the model, we expect to find a URL like the following:\nJDBCSystemResource: Database1: JdbcResource: JDBCDriverParams: URL: \u0026#39;jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=slc05til.us.oracle.com)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=orcl.us.oracle.com)))\u0026#39; We create a directive in our custom injector JSON file:\n\u0026#34;JDBCSystemResource.JdbcResource.JDBCDriverParams.URL\u0026#34;: { \u0026#34;regexp\u0026#34;: [ { \u0026#34;pattern\u0026#34;: \u0026#34;(?\u0026lt;=PORT=)[\\\\w.-]+(?=\\\\))\u0026#34;, \u0026#34;suffix\u0026#34;: \u0026#34;Port\u0026#34; }, { \u0026#34;pattern\u0026#34;: \u0026#34;(?\u0026lt;=HOST=)[\\\\w.-]+(?=\\\\))\u0026#34;, \u0026#34;suffix\u0026#34;: \u0026#34;Host\u0026#34; } ] }, During the Discover Domain Tool run, the pattern is applied to the URL string and tokens injected into the string:\nURL: 'jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=@@PROP:JDBCSystemResource.Database1.JdbcResource.JDBCDriverParams.URL--Host@@:)(PORT=@@PROP:JDBCSystemResource.Database1.JdbcResource.JDBCDriverParams.URL--Port@@)))(CONNECT_DATA=(SERVICE_NAME=orcl.us.oracle.com)))' And the variables put in the properties file:\nJDBCSystemResource.Database1.JdbcResource.JDBCDriverParams.URL--Host=slc05til.us.oracle.com JDBCSystemResource.Database1.JdbcResource.JDBCDriverParams.URL--Port=1521 Selecting specific MBean names for variable injection This final custom directive allows you to explicitly define which named entries for an MBean in the model you want to inject properties. For instance, you might want to tokenize an attribute just for a specific server. To define a list of one or more names for a specific MBean in the injector directive hierarchy, format the list as follows:\nMBean[comma separated list of names] To select only the Administration Server named AdminServer for a Server directive, use the format Server[AdminServer]. To select servers soa_server1 and soa_server2, format the key as Server[soa_server1,soa_server2].\nThe injector tool recognizes two KEYWORDS for a user list, MANAGED_SERVERS (all the Managed Servers in the model) and ADMIN_SERVER (the Administration Server in the model).\nA custom injector for the Administration Server SSL listen port is:\n{ \u0026#34;Server[ADMIN_SERVER].SSL.ListenPort\u0026#34;: {}, } Variable Injector Sample A sample of a model_variable_injector.json file and a custom injector JSON file are installed in the WLSDEPLOY/samples directory.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/model_help/",
	"title": "Model Help Tool",
	"tags": [],
	"description": "Provides information about the folders and attributes that are valid for sections and folders of a domain model.",
	"content": "The Model Help Tool provides information about the folders and attributes that are valid for sections and folders of a domain model. This is useful when creating a new domain model, or expanding an existing model, including discovered models.\nNOTE: The Model Help Tool is new in WebLogic Deploy Tooling 1.8.\nNOTE: The -model_sample argument is deprecated starting with WebLogic Deploy Tooling 1.9.2, when model sample became the default output format.\nHere is a simple example using the Model Help Tool:\n\u0026lt;wls-deploy-home\u0026gt;/bin/modelHelp.sh -oracle_home /tmp/oracle resources:/JDBCSystemResource This will result in the following output:\nAttributes and sub-folders for resources:/JDBCSystemResource resources: JDBCSystemResource: \u0026#39;JDBC-1\u0026#39;: CompatibilityName: # string DeploymentOrder: # integer DeploymentPrincipalName: # string DescriptorFileName: # string ModuleType: # string Notes: # string SourcePath: # string Target: # delimited_string JdbcResource: # see /JDBCSystemResource/JdbcResource SubDeployment: \u0026#39;SubDeployment-1\u0026#39;: # see /JDBCSystemResource/SubDeployment This output shows the eight attributes and two sub-folders available for the JDBCSystemResource folder in the resources section of the model. Each attribute includes a comment describing the type of the value to be added.\nFolders that support multiple instances, such as JDBCSystemResource in this example, are shown with a derived name, such as 'JDBC-1'.\nEach sub-folder includes a comment with a model path that can be used to display additional information about that sub-folder. For example, to determine the attributes and sub-folders for 'SubDeployment-1', the Model Help Tool could be re-invoked with the model path from the comment:\n\u0026lt;wls-deploy-home\u0026gt;/bin/modelHelp.sh -oracle_home /tmp/oracle -model_sample /JDBCSystemResource/SubDeployment You can use the information above to construct this model section:\nresources: JDBCSystemResource: CompatibilityName: \u0026#39;myName\u0026#39; DeploymentOrder: 5 Target: \u0026#39;ms1,ms2\u0026#39; \u0026#39;JDBC-1\u0026#39;: # JdbcSystemResource attributes and folders SubDeployment: deployment1: # SubDeployment attributes and folders deployment2: # SubDeployment attributes and folders If you are copying elements from the sample model to create a full domain model, you should exclude any attributes or sub-folders that you do not intend to declare or override.\nPath Patterns There are a number of ways to specify model location in the path argument. Here are some examples:\nList all the top-level model sections, such as topology, resources, and such:\ntop List the attributes and folders within a section, such as topology, resources, and such:\ntopology List all the attributes and folders within a folder:\nresources:/JDBCSystemResource/JdbcResource If the section is not provided for a folder, then it will be derived and included in the output text:\n/JDBCSystemResource/JdbcResource Output Options There are several command-line options that you can use to control the output text for the model path. Use only one of these options at a time. If no output options are specified, then the attributes and immediate sub-folders for the specified path are listed.\nNOTE: When the top sections are listed using the path top, any output options are ignored.\n-attributes_only This option will list only the attributes for the specified path.\n-folders_only This option will list only the immediate sub-folders for the specified path.\n-recursive This option will recursively list all the sub-folders within the specified path. No attributes are listed.\nHere is an example using the -recursive option:\n\u0026lt;wls-deploy-home\u0026gt;/bin/modelHelp.sh -oracle_home /tmp/oracle -recursive resources:/JDBCSystemResource The output is:\nRecursive sub-folders only for resources:/JDBCSystemResource resources: JDBCSystemResource: \u0026#39;JDBC-1\u0026#39;: JdbcResource: JDBCConnectionPoolParams: JDBCDataSourceParams: JDBCDriverParams: Properties: \u0026#39;Properties-1\u0026#39;: JDBCOracleParams: JDBCXAParams: SubDeployment: \u0026#39;SubDeployment-1\u0026#39;: "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "WebLogic Deploy Tooling Many organizations are using WebLogic Server, with or without other Oracle Fusion Middleware components, to run their enterprise applications. As more and more organizations move toward Continuous Delivery of their applications, the importance of automated testing grows. Automating WebLogic Server domain creation and application deployment with hand-coded WLST scripts is challenging. After those scripts exist for a project, they must be maintained as the project evolves. WebLogic Deploy Tooling (WDT) removes the need for most users to write WLST scripts for routine domain creation and application deployment tasks. Instead, you can write a declarative, metadata model describing the domain and applications (with their dependent resources), and use one or more of the single-purpose tools that perform domain lifecycle operations based on the content of the model. This makes it easy to stand up environments and perform domain lifecycle operations in a repeatable fashion based on a metadata model that can be treated as source and evolve as the project evolves.\nWDT provides several single-purpose tools, all exposed as shell scripts (for both Windows and UNIX). For detailed information, see WDT Tools.\nCurrent production release The current release of WebLogic Deploy Tooling is 1.9.11. This release was published on March, 2021.\nRecent changes and known issues See the Release Notes for recent changes, known issues, and workarounds.\nAbout this documentation This documentation includes sections targeted to different audiences. To help you find what you are looking for more easily, please consult this table of contents:\nContributing Those who wish to contribute to the WebLogic Deploy Tooling code will find useful information here.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/knownissues/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Known Issues for WebLogic Deploy Tooling The following list contains known issues. Each issue may contain a workaround or an associated issue number.\nDiscover Domain Tool SEVERE Messages ISSUE: The discoverDomain STDOUT contains many SEVERE messages about cd() and ls() when it is run against a 12.2.1.0 domain. The Discover Domain Tool navigates through the domain MBeans using WLST to determine which MBeans are present in a domain. When it tests an MBean that is not present, an error message is logged by WLST. There is no 12.2.1.0 PSU available to address this WLST problem. It is resolved in 12.2.1.1.\nACTION: Ignore the following messages logged during discovery of a 12.2.1.0 domain.\n\u0026lt;Jan 14, 2019 1:14:21 PM\u0026gt; \u0026lt;SEVERE\u0026gt; \u0026lt;CommandExceptionHandler\u0026gt; \u0026lt;handleException\u0026gt; \u0026lt;\u0026gt; \u0026lt;Error: cd() failed.\u0026gt; \u0026lt;Jan 14, 2019 1:14:21 PM\u0026gt; \u0026lt;SEVERE\u0026gt; \u0026lt;CommandExceptionHandler\u0026gt; \u0026lt;handleException\u0026gt; \u0026lt;\u0026gt; \u0026lt;Error: ls() failed.\u0026gt; Create Domain Tool with 11g JRF Domains ISSUE: The Create Domain Tool cannot initialize RCU for 11g JRF domains. The tool will issue error messages in the log and terminate the create process.\nACTION: Run the WLS rcu command before executing createDomain for JRF domains\nCredential in Security Configuration ISSUE: For WLS versions prior to 14.1.1, there is a problem setting the CredentialEncrypted attribute in the topology/SecurityConfiguration folder. The value is not encrypted properly in the configuration and the domain will fail to start with the error:\njava.lang.IllegalArgumentException: In production mode, it's not allowed to set a clear text value to the property: CredentialEncrypted of SecurityConfigurationMBean ACTION: Contact Oracle Support to obtain the patch for bug number 30874677 for your WebLogic Server version before running the tool.\nAssigning Security Groups to Users ISSUE: For WLS versions prior to 14.1.1, there is a problem setting the GroupMemberOf attribute in the topology/Security/User folder. The value is not persisted correctly, and the assignment will not be present when the domain is started.\nACTION: Contact Oracle Support to obtain the patch for bug number 30319071 for your WebLogic Server version before running the tool.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/rcuinfo/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Specifying RCU connection information in the model During creating or updating a domain, there is new section RCUDbInfo in the model, under the domainInfo section, for specifying RCU database connection information without using the command-line arguments -rcu_db and -rcu_prefix. Use this to support a database where the connection string is more complex and requires extra options.\nFor example, in order to use the Oracle Autonomous Transaction Processing Cloud Database for the JRF domain, specify the following information in the model:\ndomainInfo: RCUDbInfo: useATP : true rcu_prefix : DEV rcu_admin_password: \u0026lt;database admin password is required only when you specify -run_rcu flag\u0026gt; rcu_schema_password : \u0026lt;RCU schema password\u0026gt; atp.admin.user : admin tns.alias : dbatp_tp javax.net.ssl.keyStorePassword : \u0026lt;atp wallet password\u0026gt; javax.net.ssl.trustStorePassword : \u0026lt;atp wallet password\u0026gt; oracle.net.tns_admin: \u0026lt;optional: absolute path of the unzipped wallet root directory (outside of the archive), if the wallet.zip is not included in the archive\u0026gt; The database wallet can be included in the archive file under atpwallet zipentry structure\natpwallet/Walletxyz.zip\nor by specifying the unzipped root directory of the ATP wallet zip file in oracle.net.tns_admin.\nUsing the Create Domain Tool with the -run_rcu flag will create the RCU schemas against the Oracle Autonomous Transaction Processing Cloud Database and configure the datasources in the JRF domain to use the database. For example:\nweblogic-deploy/bin/createDomain.sh -oracle_home /u01/wls12213 -domain_type JRF -domain_home /u01/data/domains/demodomain -archive_file DemoDomain.zip -run_rcu  For a non-ATP database, use the following example:\ndomainInfo: RCUDbInfo: rcu_prefix : DEV # Optional rcu_db_user for creating RCU schema if -run_rcu flag is specified. Default user is SYS if not specified. # This user must have SYSDBA privilege and this is the equivalent of -dbUser in the RCU utility. rcu_db_user: superuser rcu_schema_password : \u0026lt;rcu schema password, will be prompted if not specified\u0026gt; rcu_admin_password : \u0026lt;database admin password is required only when you specify -run_rcu flag, will be prompted if not specified\u0026gt; rcu_db_conn_string : \u0026#39;dbhost:1521/pdborcl\u0026#39; RCU -variables option of the repository creation utility can now be included in the RCUDbInfo section with the key rcu_variables:\ndomainInfo: RCUDbInfo: rcu_variables : \u0026#39;xxxx\u0026#39; Note: Prior to release 0.23, the useATP flag only accepts values of 0, 1, \u0026lsquo;true\u0026rsquo; or \u0026lsquo;false\u0026rsquo;.\nWhen creating a domain using WDT and the -run_rcu option, you can specify your extended XML files in the RCUDbInfo section.\nThis correlates to the createRepository and dropRepository command line arguments RCU -compInfoXMLLocation \u0026lt;file path\u0026gt; -storageXMLLocation \u0026lt;file path\u0026gt;\nInclude your XML files in your archive file using location wlsdeploy/rcu/config. Then include this relative location in the RCUDbInfo section of the model.\ndomainInfo: RCUDbInfo: compInfoXMLLocation: \u0026#39;wlsdeploy/rcu/config/MyComponentInfo.xml\u0026#39; storageXMLLocation: \u0026#39;wlsdeploy/rcu/config/MyStorage.xml\u0026#39; "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/release-notes/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "WDT Version 1.9.11 Issues addressed in this release:\n Fixed validate process to recognize float values as strings. Fixed JMS Server issue with jarray in store. Fixed issue with recognizing NodeManager properties user and password as credentials. Fixed discovery of SAFRemoteContext. Fixed discovery of ServerTemplate DataSource.  Known Issues for WebLogic Deploy Tooling The following list contains known issues. Each issue may contain a workaround or an associated issue number.\nDiscover Domain Tool SEVERE Messages ISSUE: The discoverDomain STDOUT contains many SEVERE messages about cd() and ls() when it is run against a 12.2.1.0 domain. The Discover Domain Tool navigates through the domain MBeans using WLST to determine which MBeans are present in a domain. When it tests an MBean that is not present, an error message is logged by WLST. There is no 12.2.1.0 PSU available to address this WLST problem. It is resolved in 12.2.1.1.\nACTION: Ignore the following messages logged during discovery of a 12.2.1.0 domain.\n\u0026lt;Jan 14, 2019 1:14:21 PM\u0026gt; \u0026lt;SEVERE\u0026gt; \u0026lt;CommandExceptionHandler\u0026gt; \u0026lt;handleException\u0026gt; \u0026lt;\u0026gt; \u0026lt;Error: cd() failed.\u0026gt; \u0026lt;Jan 14, 2019 1:14:21 PM\u0026gt; \u0026lt;SEVERE\u0026gt; \u0026lt;CommandExceptionHandler\u0026gt; \u0026lt;handleException\u0026gt; \u0026lt;\u0026gt; \u0026lt;Error: ls() failed.\u0026gt; Create Domain Tool with 11g JRF Domains ISSUE: The Create Domain Tool cannot initialize RCU for 11g JRF domains. The tool will issue error messages in the log and terminate the create process.\nACTION: Run the WLS rcu command before executing createDomain for JRF domains\nCredential in Security Configuration ISSUE: For WLS versions prior to 14.1.1, there is a problem setting the CredentialEncrypted attribute in the topology/SecurityConfiguration folder. The value is not encrypted properly in the configuration and the domain will fail to start with the error:\njava.lang.IllegalArgumentException: In production mode, it's not allowed to set a clear text value to the property: CredentialEncrypted of SecurityConfigurationMBean ACTION: Contact Oracle Support to obtain the patch for bug number 30874677 for your WebLogic Server version before running the tool.\nAssigning Security Groups to Users ISSUE: For WLS versions prior to 14.1.1, there is a problem setting the GroupMemberOf attribute in the topology/Security/User folder. The value is not persisted correctly, and the assignment will not be present when the domain is started.\nACTION: Contact Oracle Support to obtain the patch for bug number 30319071 for your WebLogic Server version before running the tool.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/releaseprocess/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "WebLogic Deploy Tooling Project Release Process This document describes the process that should be followed to create a WebLogic Deploy Tooling (WDT) release.\nPrerequisites  A local installation of WebLogic Server 12.2.1.x must be available. The person running the release process must have admin privileges on the WebLogic Deploy Tooling GitHub repo since the release process pushes to the master branch directly. The person running the release process needs to create a GitHub Personal Access Token for the repository with (at least) the repo:status, repo_deployment, public_repo, and security_events privileges. The person running the release needs a server added to their Maven settings.xml where the GitHub Personal Access Token is stored, as shown below. Note that this token can either be stored in plain text of encrypted using Maven password encryption.  \u0026lt;servers\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;github\u0026lt;/id\u0026gt; \u0026lt;passphrase\u0026gt;store plain text or encrypted token here\u0026lt;/passphrase\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;/servers\u0026gt; Software Release Process The best practice is to write the release notes that will be published to GitHub prior to starting the steps below.\n Set (and export) the environment variable WLST_DIR to \u0026lt;WLS-install-dir\u0026gt;/oracle_common/common/bin, replacing \u0026lt;WLS-install-dir\u0026gt; with the full path to the WLS 12.2.1.x installation directory. In the weblogic-deploy-tooling project directory, create a file called release.properties with content similar to the example shown below. Note that the example is configured to cut the 1.9.11 release.  tag=release-1.9.11 releaseVersion=1.9.11 developmentVersion=1.9.12-SNAPSHOT In the weblogic-deploy-tooling project directory, run the mvn -B -P release release:prepare release:perform command. If your SSH private key has a passphrase, watch the build closely since it will prompt for your passphrase multiple times. Failure to enter it in a timely manner may result in a failure. If the build fails, run the mvn -B -P release release:rollback command to undo it and start over from Step 2 after correcting the issue. Once the software has been released, move on to the GitHub Release Process.  GitHub Release Process Note that this process relies on the WDT installers being in your local Maven repository. As such, it is critical for the same user to run these steps on the same machine as the steps from the previous section!\n Save the release notes in the file \u0026lt;wdt-project-directory\u0026gt;/target/ReleaseNotes.md. Run the command mvn -f github-release.xml -DreleaseVersion=\u0026lt;release version number\u0026gt; verify to create the draft GitHub Release. Log into GitHub, go to the Releases page, review/edit the draft release, and then publish the release.  "
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/wls_versions/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Supported WebLogic Server Versions The following table specifies the supported WebLogic Server versions, along with the JDK versions, that must be used to run the WDT tool. You must set the JAVA_HOME environment variable to specify a JDK version different from the system default version.\nTo create a domain with the proper JDK (particularly if the JAVA_HOME is different from the one which will be used by the target domain), set the domain JavaHome attribute in the domain model.\nNote that the WDT Encryption Model Tool used to encrypt and decrypt clear text passwords in the model and variable files, requires WDT to run with a minimum JDK version of 1.8.\n   WebLogic Server Version Tool JDK Version     10.3.6 1.7   12.1.1 1.7, 1.8   12.1.2 [1][2] 1.7, 1.8   12.1.3 1.7, 1.8   12.2.1 [3] 1.8   12.2.1.1 [4] 1.8   12.2.1.2 1.8   12.2.1.3 1.8   12.2.1.4 [5] 1.8   14.1.1 1.8, 1.11    1 First release dynamic clusters are supported\n2 First release Coherence clusters are supported\n3 First release WLS roles are supported\n4 First release multitenancy is supported\n5 Last release multitenancy is supported\n"
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://oracle.github.io/weblogic-deploy-tooling/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]