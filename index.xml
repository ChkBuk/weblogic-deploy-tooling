<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebLogic Deploy Tooling</title>
    <link>https://oracle.github.io/weblogic-deploy-tooling/</link>
    <description>Recent content on WebLogic Deploy Tooling</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Feb 2019 17:19:24 -0500</lastBuildDate><atom:link href="https://oracle.github.io/weblogic-deploy-tooling/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create Domain Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/create/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/create/</guid>
      <description>The Create Domain Tool uses a model and WLST offline to create a domain. To use the tool, at a minimum, the model must specify the domain&amp;rsquo;s administrative password in the domainInfo section of the model, as shown below.
domainInfo: AdminPassword: welcome1 Using the model above, simply run the createDomain tool, specifying the type of domain to create and where to create it.
weblogic-deploy\bin\createDomain.cmd -oracle_home c:\wls12213 -domain_type WLS -domain_parent d:\demo\domains -model_file MinimalDemoDomain.</description>
    </item>
    
    <item>
      <title>Install WDT</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/install/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/install/</guid>
      <description>Download and Install the Software The WebLogic Deploy Tooling project repository is located at https://github.com/oracle/weblogic-deploy-tooling.
Binary distributions of the weblogic-deploy.zip installer can be downloaded from the GitHub Releases page.
 To install the software, simply unzip the weblogic-deploy.zip installer on a machine that has the desired versions of WebLogic Server installed. After being unzipped, the software is ready to use, just set the JAVA_HOME environment variable to point to a Java 7 or higher JDK and the shell scripts are ready to run.</description>
    </item>
    
    <item>
      <title>Metadata Model</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/concepts/model/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/concepts/model/</guid>
      <description>Contents  Overview Top-Level Sections Simple Example Model Names Model Tokens Model Semantics Declaring Named MBeans to Delete Using Multiple Models  Overview The metadata model (or model, for short) is a version-independent description of a WebLogic Server domain configuration. The tools are designed to support a sparse model so that the model need only describe what is required for the specific operation without describing other artifacts. For example, to deploy an application that depends on a JDBC data source into an existing domain that may contain other applications or data sources, the model needs to describe only the application and the data source in question.</description>
    </item>
    
    <item>
      <title>Model Use Cases</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/samples/use_cases/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/samples/use_cases/</guid>
      <description>Contents  Customizing the Administration Server Modeling a Configured Cluster Modeling a JDBC Data Source Modeling a Work Manager Modeling Security Providers Modeling WebLogic Users, Groups, and Roles Modeling WebLogic User Password Credential Mapping Modeling ODL Modeling Oracle HTTP Server (OHS) Targeting Server Groups Using WDT with WebLogic Kubernetes Operator  Administration Server Configuration The Create Domain Tool lets you configure the Administration Server using a domain model. These examples show how some common configurations can be represented in the model.</description>
    </item>
    
    <item>
      <title>Project structure</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/developer/project-structure/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/developer/project-structure/</guid>
      <description>This project is structured using the Standard Directory Layout for Maven projects, with two child modules, core and installer. In addition, there is a samples directory with example configurations, and the site directory containing project documentation.
The core module contains the main source code for the project. This includes Jython modules and Java classes, as well as typedef files, alias definitions, and the message bundle. There are unit tests related to this module.</description>
    </item>
    
    <item>
      <title>Archive File</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/concepts/archive/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/concepts/archive/</guid>
      <description>The archive file is used to deploy binaries and other file resources to the target domain. The archive is a ZIP file with a specific directory structure. Any file resources referenced in the model that are not already on the target system must be stored in the correct location in the archive, and the model must reflect the path into the archive. The model itself can also be stored inside the archive, if desired.</description>
    </item>
    
    <item>
      <title>Feature implementation</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/developer/feature-impl/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/developer/feature-impl/</guid>
      <description>This document describes how specific features of WebLogic Deploy Tooling are implemented in the source code.
Creator and Deployer class hierarchies The creation of individual folders and attributes within the topology section of the domain model is accomplished using subclasses of the Jython class Creator, in the module wlsdeploy.tool.create.creator.py. The Creator class provides base methods to recurse through nested folders in the domain model, create or update those folders, and set or update their attributes.</description>
    </item>
    
    <item>
      <title>Target environments</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/target_env/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/target_env/</guid>
      <description>The Discover Domain and Prepare Model Tools allow you to customize the model and other files produced to be compatible with a specific target environment. Options for a target environment may include:
 Using model tokens for some attributes in the model. See Model Tokens. Using Kubernetes secrets for credentials in the model. Applying filters to the model. See Model Filters. Creating additional configuration files for the target system.  Specifying a target environment Each tool specifies a target environment using the command-line argument -target &amp;lt;target-name&amp;gt;, where &amp;lt;target-name&amp;gt; refers to a pre-configured target environment, or a user-defined environment.</description>
    </item>
    
    <item>
      <title>Tools Configuration</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/reference/tool_configuration/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/reference/tool_configuration/</guid>
      <description>Contents  Tool Property File Model Filters Domain Type Definitions Custom Configuration  Tool Property File You can configure or tune WebLogic Deploy Tooling tools using the tool property file. This property file is installed as &amp;lt;weblogic-deploy&amp;gt;/lib/tool.properties. You may change the value of any of the properties in this file to tune the WDT tool. Another option is to configure the tool properties in a Custom Configuration directory. Create the tool.</description>
    </item>
    
    <item>
      <title>Update Domain Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/update/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/update/</guid>
      <description>The Update Domain Tool uses a model, the archive, and WLST to update the configuration of an existing WebLogic Server domain, and to deploy applications and resources into the domain in either WLST online or offline mode. The update tool will add or re-configure elements from the topology section of the model, and deploy applications and resources from the resources and appDeployments sections, as described in the Deploy Applications Tool.</description>
    </item>
    
    <item>
      <title>Alias definitions</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/developer/alias-definitions/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/developer/alias-definitions/</guid>
      <description>WebLogic Deploy Tool uses a set of JSON configuration files to map folders and attributes in the model to the corresponding WLST MBeans and their attributes. These mappings are referred as &amp;lsquo;aliases&amp;rsquo; throughout the project code and documentation. Each element in the alias definition file has detailed properties that assist in this mapping.
The model&amp;rsquo;s folder and attribute names usually match the names of the corresponding elements in WLST. For cases where the names of WLST elements may change across WebLogic Server releases, the names should match the names in the 12.</description>
    </item>
    
    <item>
      <title>Deploy Applications Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/deploy/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/deploy/</guid>
      <description>The Deploy Applications Tool uses a model, the archive, and WLST to deploy applications and resources into an existing WebLogic Server domain in either WLST online or offline mode. When deploying applications and resources from a model, the deploy tool focuses primarily on the resources and appDeployments sections of the model. There are exceptions for the domainInfo and topology sections, where those configuration elements are deemed to be &amp;ldquo;application-related.&amp;rdquo; For example, the servers&#39; ServerStart folder has an Arguments and a ClassPath attribute that change the server environment (when started by the Node Manager) that applications may rely on to function properly.</description>
    </item>
    
    <item>
      <title>Build WebLogic Deploy Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/developer/buildwdt/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/developer/buildwdt/</guid>
      <description>Prerequisites You will need the following software installed in your local build environment:
 Oracle WebLogic Server installation version 12.2.1 and later JDK version 8 Maven 3 and later  Specifying the WLST location Execution of the unit tests requires a WebLogic Server installation, because the tests must be run within WLST.
The WLST directory can be specified in one of two ways:
  Specify the -Dunit-test-wlst-dir=&amp;lt;wlst-directory&amp;gt; on the mvn command line.</description>
    </item>
    
    <item>
      <title>Discover Domain Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/discover/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/discover/</guid>
      <description>The Discover Domain Tool provides a bootstrapping mechanism to creating a model and archive file by inspecting an existing domain and gathering configuration and binaries from it. Note that the model file produced by the tool is not directly usable by the Create Domain Tool or the Deploy Applications Tool because the Discover Domain Tool does not discover the passwords from the existing domain. Instead, it puts a --FIX ME-- placeholder for passwords it finds.</description>
    </item>
    
    <item>
      <title>Encrypt Model Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/encrypt/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/encrypt/</guid>
      <description>To meet Oracle&amp;rsquo;s security standards, the encryption algorithms require JDK 8 to execute.
 Models contain WebLogic Server domain configuration. Certain types of resources and other configurations require passwords; for example, a JDBC data source requires the password for the user establishing the database connection. When creating or configuring a resource that requires a password, that password must be specified either in the model directly or in the variable file.</description>
    </item>
    
    <item>
      <title>WDT Project Release Process</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/developer/releaseprocess/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/developer/releaseprocess/</guid>
      <description>This document describes the process that should be followed to create a WebLogic Deploy Tooling (WDT) release.
Prerequisites  A local installation of WebLogic Server 12.2.1.x must be available. The person running the release process must have admin privileges on the WebLogic Deploy Tooling GitHub repo because the release process pushes to the master branch directly. The person running the release process needs to create a GitHub Personal Access Token for the repository with (at least) the repo:status, repo_deployment, public_repo, and security_events privileges.</description>
    </item>
    
    <item>
      <title>Validate Model Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/validate/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/validate/</guid>
      <description>When working with a metadata model that drives tooling, it is critical to make it easy both to validate that the model and its related artifacts are well-formed and to provide help on the valid attributes and subfolders for a particular model location. The Validate Model Tool provides both validation and help for model authors as a standalone tool. In addition, the tool is integrated with the createDomain and deployApps tools to catch validation errors early, before any actions are performed on the domain.</description>
    </item>
    
    <item>
      <title>Compare Model Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/compare/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/compare/</guid>
      <description>When working with a domain model, sometimes it is useful to know the differences between different models. The Compare Model Tool compares two model files and generates a model that shows the differences between them.
To use the Compare Model Tool, simply run the compareModel shell script with the correct arguments. To see the list of valid arguments, simply run the shell script with the -help option (or with no arguments) for usage information.</description>
    </item>
    
    <item>
      <title>Prepare Model Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/prepare/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/prepare/</guid>
      <description>The Prepare Model Tool prepares WDT model files for deploying to specific target environments. These customizations include:
 Removing sections from the model that are not compatible with the environment Replacing credential and attribute values with WDT macros Generating a UNIX shell script that will help with creating any required Kubernetes secrets Generating a variable properties file to customize attribute values Generating any additional configuration files to configure the target environment Updating the model file(s)  To use the Prepare Model Tool, simply run the prepareModel shell script with the correct arguments.</description>
    </item>
    
    <item>
      <title>Extract Domain Resource Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/kubernetes/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/kubernetes/</guid>
      <description>Using WDT with WebLogic Kubernetes Operator The Extract Domain Resource Tool can be used to create a domain resource file for use with the WebLogic Kubernetes Operator. This allows the domain configuration and the Kubernetes container configuration to be specified in a single model file.
This is especially useful when making configuration changes to the domain that also need to be reflected in the domain resource file. For example, adding a cluster to the domain only requires that it be added to the topology section of the WDT model, then a new domain resource file can be generated to apply to Kubernetes.</description>
    </item>
    
    <item>
      <title>Variable Injector Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/variable_injection/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/variable_injection/</guid>
      <description>The Variable Injector Tool is used to tokenize a model with variables. The values for these variables are assigned using an external property file. This facilitates using the same domain model to create new domains in different environments. The Variable Injector Tool can be run as an option in the Discover Domain Tool, or from the standalone command-line interface.
To enable the Variable Injector Tool during the Discover Domain Tool run, create a variable injector configuration by placing a JSON file named model_variable_injector.</description>
    </item>
    
    <item>
      <title>Model Help Tool</title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/model_help/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/userguide/tools/model_help/</guid>
      <description>The Model Help Tool provides information about the folders and attributes that are valid for sections and folders of a domain model. This is useful when creating a new domain model, or expanding an existing model, including discovered models.
The Model Help Tool is new in WebLogic Deploy Tooling 1.8. The -model_sample argument is deprecated starting with WebLogic Deploy Tooling 1.9.2, when model sample became the default output format.
 Here is a simple example using the Model Help Tool:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/rcuinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/rcuinfo/</guid>
      <description>Specifying RCU connection information in the model During creating or updating a domain, there is new section RCUDbInfo in the model, under the domainInfo section, for specifying RCU database connection information without using the command-line arguments -rcu_db and -rcu_prefix. Use this to support a database where the connection string is more complex and requires extra options.
For example, in order to use the Oracle Autonomous Transaction Processing Cloud Database for the JRF domain, specify the following information in the model:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/release-notes/</guid>
      <description>Known Issues for WebLogic Deploy Tooling The following list contains known issues. Each issue may contain a workaround or an associated issue number.
Discover Domain Tool SEVERE Messages ISSUE: The discoverDomain STDOUT contains many SEVERE messages about cd() and ls() when it is run against a 12.2.1.0 domain. The Discover Domain Tool navigates through the domain MBeans using WLST to determine which MBeans are present in a domain. When it tests an MBean that is not present, an error message is logged by WLST.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oracle.github.io/weblogic-deploy-tooling/wls_versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-deploy-tooling/wls_versions/</guid>
      <description>Supported WebLogic Server Versions The following table specifies the supported WebLogic Server versions, along with the JDK versions, that must be used to run the WDT tool. You must set the JAVA_HOME environment variable to specify a JDK version different from the system default version.
To create a domain with the proper JDK (particularly if the JAVA_HOME is different from the one which will be used by the target domain), set the domain JavaHome attribute in the domain model.</description>
    </item>
    
  </channel>
</rss>
